2024-11-16-17-21-11 103 1 def within_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    num_samples = data.shape[0]	    within_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        cluster_points_inds = np.argwhere(labels == cluster_ind)	        cluster_points = labels[cluster_points_inds]	        a_of_i_frac = 1 / (len(cluster_points) - 1)	        a_of_i_sum = 0	        for other_data_point in cluster_points:	            if not np.array_equal(data_point, other_data_point):	                a_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	        a_of_i = a_of_i_frac * a_of_i_sum	        within_distances[result_ind] = a_of_i	    return within_distances		# data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	# print(within_cluster_distances(data, labels))		save_history()
2024-11-16-17-21-11 103 2 get_ipython().run_line_magic('matplotlib', 'inline')	import matplotlib.pyplot as plt	from typing import Tuple	import numpy as np	import scipy as sp	from submission_utils import save_history, check_and_prepare_for_submission	# import warnings filter	from warnings import simplefilter	# ignore all future warnings	simplefilter(action='ignore', category=FutureWarning)
2024-11-16-17-21-11 103 3 def within_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    num_samples = data.shape[0]	    within_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        cluster_points_inds = np.argwhere(labels == cluster_ind)	        cluster_points = labels[cluster_points_inds]	        a_of_i_frac = 1 / (len(cluster_points) - 1)	        a_of_i_sum = 0	        for other_data_point in cluster_points:	            if not np.array_equal(data_point, other_data_point):	                a_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	        a_of_i = a_of_i_frac * a_of_i_sum	        within_distances[result_ind] = a_of_i	    return within_distances		# data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	# print(within_cluster_distances(data, labels))		save_history()
2024-11-16-17-21-11 103 4 def within_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    num_samples = data.shape[0]	    within_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        cluster_points_inds = np.argwhere(labels == cluster_ind)	        cluster_points = labels[cluster_points_inds]	        a_of_i_frac = 1 / (len(cluster_points) - 1)	        a_of_i_sum = 0	        for other_data_point in cluster_points:	            if not np.array_equal(data_point, other_data_point):	                a_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	        a_of_i = a_of_i_frac * a_of_i_sum	        within_distances[result_ind] = a_of_i	    return within_distances		data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	print(within_cluster_distances(data, labels))		save_history()
2024-11-16-17-21-11 103 5 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    data = np.array(data)	    labels = np.array(labels)	    return (data, labels)	# data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)		save_history()
2024-11-16-17-21-11 103 6 def within_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    num_samples = data.shape[0]	    within_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        cluster_points_inds = np.argwhere(labels == cluster_ind)	        cluster_points = labels[cluster_points_inds]	        a_of_i_frac = 1 / (len(cluster_points) - 1)	        a_of_i_sum = 0	        for other_data_point in cluster_points:	            if not np.array_equal(data_point, other_data_point):	                a_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	        a_of_i = a_of_i_frac * a_of_i_sum	        within_distances[result_ind] = a_of_i	    return within_distances		data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	print(within_cluster_distances(data, labels))		save_history()
2024-11-16-17-21-11 103 7 def within_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    num_samples = data.shape[0]	    within_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        cluster_points_inds = np.argwhere(labels == cluster_ind)	        cluster_points = labels[cluster_points_inds]	        a_of_i_frac = 1 / (len(cluster_points) - 1)	        a_of_i_sum = 0	        for other_data_point in cluster_points:	            if not np.array_equal(data_point, other_data_point):	                a_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	        a_of_i = a_of_i_frac * a_of_i_sum	        within_distances[result_ind] = a_of_i	    return within_distances		data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	print(within_cluster_distances(data, labels))		save_history()
