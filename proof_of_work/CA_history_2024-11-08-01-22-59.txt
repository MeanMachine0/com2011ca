2024-11-08-01-22-59 84 1 get_ipython().run_line_magic('matplotlib', 'inline')	import matplotlib.pyplot as plt	from typing import Tuple	import numpy as np	import scipy as sp	from submission_utils import save_history, check_and_prepare_for_submission	# import warnings filter	from warnings import simplefilter	# ignore all future warnings	simplefilter(action='ignore', category=FutureWarning)
2024-11-08-01-22-59 84 2 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    sum(num_points)	    data = np.ndarray(shape=(total_num_points))	    return	ape = np.ndarray(shape=(3, ))	ape[0] = 1	ape[1] = 2	ape[2] = 3	print(ape.sum())		    	save_history()
2024-11-08-01-22-59 84 3 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    sum(num_points)	    data = np.ndarray(shape=(total_num_points))	    return	ape = np.ndarray(shape=3)	ape[0] = 1	ape[1] = 2	ape[2] = 3	print(ape.sum())		    	save_history()
2024-11-08-01-22-59 84 4 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    sum(num_points)	    data = np.ndarray(shape=(total_num_points))	    return	ape = np.ndarray(shape=3)	ape[0] = 1	ape[1] = 2	ape[2] = 3	print(ape.sum())		    	save_history()
2024-11-08-01-22-59 84 5 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    sum(num_points)	    data = np.ndarray(shape=(total_num_points))	    return	ape = np.ndarray(shape=(3,))	ape[0] = 1	ape[1] = 2	ape[2] = 3	print(ape.sum())		    	save_history()
2024-11-08-01-22-59 84 6 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    sum(num_points)	    data = np.ndarray(shape=(total_num_points))	    return	ape = np.ndarray(shape=(3,))	ape[0] = 1	ape[1] = 2	ape[2] = 5	print(ape.sum())		    	save_history()
2024-11-08-01-22-59 84 7 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array(shape=(total_num_points, num_dimensions))	    labels = np.array(shape=(total_num_points,))	    for i in range(num_clusters):	        points_in_cluster = num_points[i]	        print(points_in_cluster)	        np.random.normal()	    return		    	save_history()
2024-11-08-01-22-59 84 8 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=0, scale=1, size=1))	    	save_history()
2024-11-08-01-22-59 84 9 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=0, scale=1, size=1)[0])	    	save_history()
2024-11-08-01-22-59 84 10 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=0, scale=1, size=1)[0])	    	save_history()
2024-11-08-01-22-59 84 11 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=0, scale=1, size=1)[0])	    	save_history()
2024-11-08-01-22-59 84 12 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=0, scale=1, size=1)[0])	    	save_history()
2024-11-08-01-22-59 84 13 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=0, scale=1, size=1)[0])	    	save_history()
2024-11-08-01-22-59 84 14 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=0, scale=1, size=1)[0])	    	save_history()
2024-11-08-01-22-59 84 15 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=0, scale=1, size=1)[0])	    	save_history()
2024-11-08-01-22-59 84 16 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=0, scale=1, size=1)[0])	    	save_history()
2024-11-08-01-22-59 84 17 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=(0, 3, -2), scale=1, size=(1000, 3)))	save_history()
2024-11-08-01-22-59 84 18 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=(0, 3, -2), scale=1, size=(10, 3)))	save_history()
2024-11-08-01-22-59 84 19 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=(0, 3, -2), scale=1, size=(20, 3)))	save_history()
2024-11-08-01-22-59 84 20 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=(0, 3, -2), scale=1, size=(20, 3)))	save_history()
2024-11-08-01-22-59 84 21 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=(0, 3, -2), scale=1, size=(20, 3)))	save_history()
2024-11-08-01-22-59 84 22 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=(0, 3, -2), scale=1, size=(20, 3)))	save_history()
2024-11-08-01-22-59 84 23 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=(0, 3, -2), scale=1, size=(20, 3)))	save_history()
2024-11-08-01-22-59 84 24 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	d = np.random.normal(loc=(0, 3, -2), scale=1, size=(100000, 3))	print(12 ** (1/2))	save_history()
2024-11-08-01-22-59 84 25 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	d = np.random.normal(loc=(0, 3, -2), scale=1, size=(100000, 3))	print(16 ** (1/2))	save_history()
2024-11-08-01-22-59 84 26 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2), scale=1, size=(100000, 3))	dists = [((point[0] ** 2) + (3 - point[1]) ** 2 + (-2 - point[2])) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-01-22-59 84 27 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2), scale=1, size=(100000, 3))	dists = [((point[0] ** 2) + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-01-22-59 84 28 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2), scale=1, size=(100000, 3))	dists = [((point[0] ** 2) + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-01-22-59 84 29 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2), scale=1, size=(100000, 3))	dists = [((point[0] ** 2) + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-01-22-59 84 30 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2), scale=1, size=(100000, 3))	dists = [((point[0] ** 2) + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-01-22-59 84 31 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2), scale=1, size=(100, 3))	dists = [((point[0] ** 2) + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-01-22-59 84 32 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2), scale=1, size=(100, 3))	dists = [((point[0] ** 2) + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-01-22-59 84 33 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2), scale=1, size=(100, 3))	dists = [((point[0] ** 2) + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-01-22-59 84 34 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2), scale=1, size=(100, 3))	dists = [((point[0] ** 2) + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-01-22-59 84 35 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2), scale=1, size=(100, 3))	dists = [((point[0] ** 2) + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-01-22-59 84 36 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2), scale=1, size=(100, 3))	dists = [((point[0] ** 2) + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	print(points)	save_history()
2024-11-08-01-22-59 84 37 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2), scale=1, size=(100000, 3))	dists = [((point[0] ** 2) + ((3 - point[1]) ** 2) + ((-2 - point[2]) ** 2)) ** (1 / 2) for point in points]	save_history()
2024-11-08-01-22-59 84 38 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2), scale=1, size=(100000, 3))	dists = [((point[0] ** 2) + ((3 - point[1]) ** 2) + ((-2 - point[2]) ** 2)) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-01-22-59 84 39 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2), scale=1, size=(100000, 3))	dists = [((point[0] ** 2) + ((3 - point[1]) ** 2) + ((-2 - point[2]) ** 2)) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-01-22-59 84 40 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2), scale=1, size=(100000, 16))	dists = [((point[0] ** 2) + ((3 - point[1]) ** 2) + ((-2 - point[2]) ** 2)) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-01-22-59 84 41 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2, 0), scale=1, size=(100000, 4))	dists = [(point[0] ** 2 + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2 + point[3] ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-01-22-59 84 42 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2, 0), scale=1, size=(100000, 4))	dists = [(point[0] ** 2 + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2 + point[3] ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-01-22-59 84 43 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2, 0), scale=1, size=(100000, 4))	dists = [(point[0] ** 2 + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2 + point[3] ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-01-22-59 84 44 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2, 0), scale=1, size=(100000, 4))	dists = [(point[0] ** 2 + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2 + point[3] ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-01-22-59 84 45 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2, 0), scale=1, size=(100000, 4))	dists = [(point[0] ** 2 + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2 + point[3] ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-01-22-59 84 46 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2, 0), scale=3, size=(100000, 4))	dists = [(point[0] ** 2 + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2 + point[3] ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-01-22-59 84 47 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        origin = (0 for i in range(num_dimensions))	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print((0 for i in range(6)))	save_history()
2024-11-08-01-22-59 84 48 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        origin = (0 for i in range(num_dimensions))	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.zeros((3,)))	save_history()
2024-11-08-01-22-59 84 49 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=num_clusters)	    for i in range(num_clusters):	        cluster_centre = cluster_centres[i]	        cluster_points = np.random.normal(loc=cluster_centre, scale=cluster_std_devs[i])	        data[i] = cluster_points	        labels[i] = i	    return	print(create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10))	save_history()
2024-11-08-01-22-59 84 50 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    labels = np.array()	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=num_clusters)	    for i in range(num_clusters):	        cluster_centre = cluster_centres[i]	        cluster_points = np.random.normal(loc=cluster_centre, scale=cluster_std_devs[i])	        data[i] = cluster_points	        labels[i] = i	    return	print(create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10))	save_history()
2024-11-08-01-22-59 84 51 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.empty((total_num_points, num_dimensions))	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=num_clusters)	    for i in range(num_clusters):	        cluster_centre = cluster_centres[i]	        cluster_points = np.random.normal(loc=cluster_centre, scale=cluster_std_devs[i])	        data[i] = cluster_points	        labels[i] = i	    return	print(create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10))	save_history()
2024-11-08-01-22-59 84 52 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.empty((total_num_points, num_dimensions))	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=num_clusters)	    for i in range(num_clusters):	        cluster_centre = cluster_centres[i]	        cluster_points = np.random.normal(loc=cluster_centre, scale=cluster_std_devs[i], size=num_points[i])	        data[i] = cluster_points	        labels[i] = i	    return	print(create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10))	save_history()
2024-11-08-01-22-59 84 53 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.empty((total_num_points, num_dimensions))	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=num_clusters)	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=num_points[i])	        data[i] = cluster_points	        labels[i] = i	    return	print(create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10))	save_history()
2024-11-08-01-22-59 84 54 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = np.empty((total_num_points, num_dimensions))	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=num_clusters)	    print(cluster_centres)	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=num_points[i])	        data[i] = cluster_points	        labels[i] = i	    return	print(create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10))	save_history()
2024-11-08-01-22-59 84 55 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = np.empty((total_num_points, num_dimensions))	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        data[i] = cluster_points	        labels[i] = i	    return	print(create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10))	save_history()
2024-11-08-01-22-59 84 56 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = np.empty((total_num_points, num_dimensions))	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    print(cluster_centres)	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        data[i] = cluster_points	        labels[i] = i	    return	print(create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10))	save_history()
2024-11-08-01-22-59 84 57 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = np.empty((total_num_points, num_dimensions))	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    print(cluster_centres)	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        data[i] = cluster_points	        labels[i] = i	    return	print(create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 1))	save_history()
2024-11-08-01-22-59 84 58 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = np.empty((total_num_points, num_dimensions))	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        print(cluster_points)	        data[i] = cluster_points	        labels[i] = i	    return	print(create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10))	save_history()
2024-11-08-01-22-59 84 59 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = np.empty((total_num_points, num_dimensions))	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        print(cluster_points)	        data[i] = cluster_points	        labels[i] = i	    return	print(create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10))	save_history()
2024-11-08-01-22-59 84 60 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = np.empty((total_num_points, num_dimensions))	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        print(cluster_points)	        print(cluster_points[0])	        data[i] = cluster_points	        labels[i] = i	    return	print(create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10))	save_history()
2024-11-08-01-22-59 84 61 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = []	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        labels[i] = i	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	    return (np.array(data), labels)	print(create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10))	save_history()
2024-11-08-01-22-59 84 62 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = []	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        labels[i] = i	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	    return (np.array(data), labels)	print(create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10)[0])	save_history()
2024-11-08-01-22-59 84 63 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = []	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        labels[i] = i	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	    return (np.array(data), labels)	print(create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10)[0])	save_history()
