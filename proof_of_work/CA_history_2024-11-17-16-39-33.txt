2024-11-17-16-39-33 106 1 import matplotlib.cm as cm	import matplotlib.pyplot as plt	from sklearn.decomposition import PCA		def plot_dataset(data: np.ndarray, labels: np.ndarray) -> None:	    if (data.ndim == 1):	        return	    data_2d = PCA(n_components=2).fit_transform(data)	    unique_labels = np.unique(labels)	    cmap = cm.get_cmap('tab10', len(unique_labels))	    for cluster_label in unique_labels:	        cluster_data = data_2d[labels == cluster_label]	        plt.scatter(*cluster_data.T, alpha=0.5, color=cmap(cluster_label), label=f'Cluster {cluster_label}')	    plt.axis('equal')	    plt.xlabel('PCA Component 1')	    plt.ylabel('PCA Component 2')	    plt.legend()	    plt.grid()	    plt.show()	    return		save_history()
2024-11-17-16-39-33 106 2 get_ipython().run_line_magic('matplotlib', 'inline')	import matplotlib.pyplot as plt	from typing import Tuple	import numpy as np	import scipy as sp	from submission_utils import save_history, check_and_prepare_for_submission	# import warnings filter	from warnings import simplefilter	# ignore all future warnings	simplefilter(action='ignore', category=FutureWarning)
2024-11-17-16-39-33 106 3 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    data = np.array(data)	    labels = np.array(labels)	    return (data, labels)		save_history()
2024-11-17-16-39-33 106 4 # This cell is reserved for the unit tests. Do not consider this cell. 
2024-11-17-16-39-33 106 5 # This cell is reserved for the unit tests. Do not consider this cell. 
2024-11-17-16-39-33 106 6 def pca_with_svd(data: np.ndarray, n_components: int) -> np.ndarray:	    centred_data = data - np.mean(data, axis=0)	    u, s, vh = np.linalg.svd(centred_data)	    transformed_data = centred_data.dot(vh.T[:, :n_components])	    return transformed_data		save_history()
2024-11-17-16-39-33 106 7 # This cell is reserved for the unit tests. Do not consider this cell. 
2024-11-17-16-39-33 106 8 import matplotlib.cm as cm	import matplotlib.pyplot as plt	from sklearn.decomposition import PCA		def plot_dataset(data: np.ndarray, labels: np.ndarray) -> None:	    if (data.ndim == 1):	        return	    data_2d = PCA(n_components=2).fit_transform(data)	    unique_labels = np.unique(labels)	    cmap = cm.get_cmap('tab10', len(unique_labels))	    for cluster_label in unique_labels:	        cluster_data = data_2d[labels == cluster_label]	        plt.scatter(*cluster_data.T, alpha=0.5, color=cmap(cluster_label), label=f'Cluster {cluster_label}')	    plt.axis('equal')	    plt.xlabel('PCA Component 1')	    plt.ylabel('PCA Component 2')	    plt.legend()	    plt.grid()	    plt.show()	    return		save_history()
2024-11-17-16-39-33 106 9 # This cell is reserved for the unit tests. Do not consider this cell. 
