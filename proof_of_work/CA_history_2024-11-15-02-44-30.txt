2024-11-15-02-44-30 100 1 get_ipython().run_line_magic('matplotlib', 'inline')	import matplotlib.pyplot as plt	from typing import Tuple	import numpy as np	import scipy as sp	from submission_utils import save_history, check_and_prepare_for_submission	# import warnings filter	from warnings import simplefilter	# ignore all future warnings	simplefilter(action='ignore', category=FutureWarning)
2024-11-15-02-44-30 100 2 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    nearest_neighbours = NearestNeighbors(n_neighbors=k)	    knn_graph = nearest_neighbours.fit(data)	    return knn_graph		save_history()
2024-11-15-02-44-30 100 3 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    	    return		save_history()
2024-11-15-02-44-30 100 4 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    for i, neighbours in enumerate(indices):	        for j in neighbours:	            knn_graph[i, j] = distances[i, j]	    return		X = [[0], [3], [1]]	neigh = NearestNeighbors(n_neighbors=2)	neigh.fit(X)	print(neigh.kneighbors_graph(X).toarray())		save_history()
2024-11-15-02-44-30 100 5 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    return distances		X = [[0], [3], [1]]	neigh = NearestNeighbors(n_neighbors=2)	neigh.fit(X)	print(neigh.kneighbors_graph(X).toarray())	print(construct_knn_graph(X))		save_history()
2024-11-15-02-44-30 100 6 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    return distances		X = [[0], [3], [1]]	neigh = NearestNeighbors(n_neighbors=2)	neigh.fit(X)	print(neigh.kneighbors_graph(X).toarray())	print(construct_knn_graph(X, 2))		save_history()
2024-11-15-02-44-30 100 7 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    return distances		X = [[0], [3], [1]]	neigh = NearestNeighbors(n_neighbors=2)	neigh.fit(X)	print(neigh.kneighbors_graph(X).toarray())	print(construct_knn_graph(np.array(X), 2))		save_history()
2024-11-15-02-44-30 100 8 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    return distances, indices		X = [[0], [3], [1]]	neigh = NearestNeighbors(n_neighbors=2)	neigh.fit(X)	print(neigh.kneighbors_graph(X).toarray())	print(construct_knn_graph(np.array(X), 2))		save_history()
2024-11-15-02-44-30 100 9 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    return np.vstack((distances, indices))		X = [[0], [3], [1]]	neigh = NearestNeighbors(n_neighbors=2)	neigh.fit(X)	print(neigh.kneighbors_graph(X).toarray())	print(construct_knn_graph(np.array(X), 2))		save_history()
2024-11-15-02-44-30 100 10 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    return distances, indices		X = [[0], [3], [1]]	neigh = NearestNeighbors(n_neighbors=2)	neigh.fit(X)	print(neigh.kneighbors_graph(X).toarray())	print(construct_knn_graph(np.array(X), 2))		save_history()
2024-11-15-02-44-30 100 11 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    return np.vstack((distances, indices))		X = [[0], [3], [1]]	neigh = NearestNeighbors(n_neighbors=2)	neigh.fit(X)	print(neigh.kneighbors_graph(X).toarray())	print(construct_knn_graph(np.array(X), 2))		save_history()
2024-11-15-02-44-30 100 12 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k + 1)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    return np.vstack((distances, indices))		X = [[0], [3], [1]]	neigh = NearestNeighbors(n_neighbors=2)	neigh.fit(X)	print(neigh.kneighbors_graph(X).toarray())	print(construct_knn_graph(np.array(X), 2))		save_history()
2024-11-15-02-44-30 100 13 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k + 1)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    for i, (distances_vector, neighbours) in enumerate(zip(distances, indices)):	        for distance, j in zip(distances_vector, neighbours):	            knn_graph[i, j] = distance	            knn_graph[j, i] = distance	    return knn_graph		X = [[0], [3], [1]]	neigh = NearestNeighbors(n_neighbors=2)	neigh.fit(X)	print(neigh.kneighbors_graph(X).toarray())	print(construct_knn_graph(np.array(X), 2))		save_history()
2024-11-15-02-44-30 100 14 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    for i, (distances_vector, neighbours) in enumerate(zip(distances, indices)):	        for distance, j in zip(distances_vector, neighbours):	            knn_graph[i, j] = distance	            knn_graph[j, i] = distance	    return knn_graph		X = [[0], [3], [1]]	neigh = NearestNeighbors(n_neighbors=2)	neigh.fit(X)	print(neigh.kneighbors_graph(X).toarray())	print(construct_knn_graph(np.array(X), 2))		save_history()
2024-11-15-02-44-30 100 15 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    for i, (distances_vector, neighbours) in enumerate(zip(distances, indices)):	        for distance, j in zip(distances_vector, neighbours):	            knn_graph[i, j] = distance	            knn_graph[j, i] = distance	    return knn_graph		X = [[0], [3], [1]]	k = 2	neigh = NearestNeighbors(n_neighbors=k)	neigh.fit(X)	print(neigh.kneighbors_graph(X).toarray())	print(construct_knn_graph(np.array(X), k))		save_history()
2024-11-15-02-44-30 100 16 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    for i, (distances_vector, indices_vector) in enumerate(zip(distances, indices)):	        for distance, j in zip(distances_vector, indices_vector):	            knn_graph[i, j] = distance	            knn_graph[j, i] = distance	    return knn_graph		X = [[0], [3], [1]]	k = 2	neigh = NearestNeighbors(n_neighbors=k)	neigh.fit(X)	print(neigh.kneighbors_graph(X, mode='distance').toarray())	print(construct_knn_graph(np.array(X), k))		save_history()
2024-11-15-02-44-30 100 17 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    for i, (distances_vector, indices_vector) in enumerate(zip(distances, indices)):	        for distance, j in zip(distances_vector, indices_vector):	            knn_graph[i, j] = distance	            knn_graph[j, i] = distance	    return knn_graph		X = [[0], [3], [1]]	k = 2	neigh = NearestNeighbors(n_neighbors=k)	neigh.fit(X)	print(neigh.kneighbors_graph(X, mode='distance').toarray())	print(construct_knn_graph(np.array(X), k))		save_history()
2024-11-15-02-44-30 100 18 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    for i, (distances_vector, indices_vector) in enumerate(zip(distances, indices)):	        for distance, j in zip(distances_vector, indices_vector):	            knn_graph[i, j] = distance	            knn_graph[j, i] = distance	    return knn_graph		X = [[0], [3], [1]]	k = 2	neigh = NearestNeighbors(n_neighbors=k)	neigh.fit(X)	print(neigh.kneighbors_graph(X, mode='distance').toarray())	print(construct_knn_graph(np.array(X), k))		save_history()
2024-11-15-02-44-30 100 19 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    for i, (distances_vector, indices_vector) in enumerate(zip(distances, indices)):	        for distance, j in zip(distances_vector, indices_vector):	            knn_graph[i, j] = distance	            # knn_graph[j, i] = distance	    return knn_graph		X = [[0], [3], [1]]	k = 2	neigh = NearestNeighbors(n_neighbors=k)	neigh.fit(X)	print(neigh.kneighbors_graph(X, mode='distance').toarray())	print(construct_knn_graph(np.array(X), k))		save_history()
2024-11-15-02-44-30 100 20 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    for i, (distances_vector, indices_vector) in enumerate(zip(distances, indices)):	        for distance, j in zip(distances_vector, indices_vector):	            knn_graph[i, j] = distance	    return knn_graph		X = [[0], [3], [1]]	k = 2	neigh = NearestNeighbors(n_neighbors=k)	neigh.fit(X)	print(neigh.kneighbors_graph(X, mode='distance').toarray())	print(construct_knn_graph(np.array(X), k))		save_history()
2024-11-15-02-44-30 100 21 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    for i, (distances_vector, indices_vector) in enumerate(zip(distances, indices)):	        for distance, j in zip(distances_vector, indices_vector):	            knn_graph[i, j] = distance	    return knn_graph		# X = [[0], [3], [1]]	# k = 2	# neigh = NearestNeighbors(n_neighbors=k)	# neigh.fit(X)	# print(neigh.kneighbors_graph(X, mode='distance').toarray())	# print(construct_knn_graph(np.array(X), k))		save_history()
2024-11-15-02-44-30 100 22 from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    return dijkstra(csgraph=knn_graph)		save_history()
2024-11-15-02-44-30 100 23 from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    return dijkstra(csgraph=knn_graph)		print(compute_geodesic_distances([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	]))		save_history()
2024-11-15-02-44-30 100 24 from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    return dijkstra(csgraph=knn_graph, return_predecessors=True)		print(compute_geodesic_distances([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	]))		save_history()
2024-11-15-02-44-30 100 25 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    graph = csr_matrix(graph)	    return dijkstra(csgraph=graph, return_predecessors=True)		print(compute_geodesic_distances([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	]))		save_history()
2024-11-15-02-44-30 100 26 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    graph = csr_matrix(knn_graph)	    return dijkstra(csgraph=graph, return_predecessors=True)		print(compute_geodesic_distances([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	]))		save_history()
2024-11-15-02-44-30 100 27 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    graph = csr_matrix(knn_graph)	    return dijkstra(csgraph=graph, directed=False, return_predecessors=True)		print(compute_geodesic_distances([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	]))		save_history()
2024-11-15-02-44-30 100 28 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    graph = csr_matrix(knn_graph)	    return dijkstra(csgraph=graph, directed=False, indices=0, return_predecessors=True)		print(compute_geodesic_distances([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	]))		save_history()
2024-11-15-02-44-30 100 29 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    	    return 		graph = np.array([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	    ])	print(compute_geodesic_distances(graph))	cs_graph = csr_matrix(graph)	print(dijkstra(csgraph=cs_graph, directed=False, indices=0, return_predecessors=True))		save_history()
2024-11-15-02-44-30 100 30 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    	    return 		graph = np.array([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	    ])	print(compute_geodesic_distances(graph))	cs_graph = csr_matrix(graph)	print(dijkstra(csgraph=cs_graph, directed=False, return_predecessors=True))		save_history()
2024-11-15-02-44-30 100 31 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    	    return 		graph = np.array([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	    ])	print(compute_geodesic_distances(graph))	cs_graph = csr_matrix(graph)	print(dijkstra(csgraph=cs_graph, directed=False))		save_history()
2024-11-15-02-44-30 100 32 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    	    return 		graph = np.array([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	    ])	print(compute_geodesic_distances(graph))	cs_graph = csr_matrix(graph)	print(dijkstra(csgraph=cs_graph, directed=True))		save_history()
2024-11-15-02-44-30 100 33 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    	    return 		graph = np.array([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	    ])	print(compute_geodesic_distances(graph))	cs_graph = csr_matrix(graph)	print(dijkstra(csgraph=cs_graph, directed=False))		save_history()
2024-11-15-02-44-30 100 34 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    	    return 		graph = np.array([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	    ])	print(compute_geodesic_distances(graph))	cs_graph = csr_matrix(graph)	print(cs_graph)	print(dijkstra(csgraph=cs_graph, directed=False))		save_history()
2024-11-15-02-44-30 100 35 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    num_samples = knn_graph.shape(0)	    geodesic_distances = np.zeros((knn_graph.shape(0), num_samples))	    knn_cs_graph = csr_matrix(knn_graph)	    for i in range(num_samples):	        distances_vector = dijkstra(cs_graph=knn_cs_graph, indices=i)	        geodesic_distances[i] = distances_vector	    return geodesic_distances		graph = np.array([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	    ])	print(compute_geodesic_distances(graph))	print(dijkstra(csgraph=csr_matrix(graph), directed=False))		save_history()
2024-11-15-02-44-30 100 36 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    num_samples = knn_graph.shape[0]	    geodesic_distances = np.zeros((num_samples, num_samples))	    knn_cs_graph = csr_matrix(knn_graph)	    for i in range(num_samples):	        distances_vector = dijkstra(cs_graph=knn_cs_graph, indices=i)	        geodesic_distances[i] = distances_vector	    return geodesic_distances		graph = np.array([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	    ])	print(compute_geodesic_distances(graph))	print(dijkstra(csgraph=csr_matrix(graph), directed=False))		save_history()
2024-11-15-02-44-30 100 37 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    num_samples = knn_graph.shape[0]	    geodesic_distances = np.zeros((num_samples, num_samples))	    knn_cs_graph = csr_matrix(knn_graph)	    for i in range(num_samples):	        distances_vector = dijkstra(cs_graph=knn_cs_graph, indices=i, return_predecessors=False)	        geodesic_distances[i] = distances_vector	    return geodesic_distances		graph = np.array([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	    ])	print(compute_geodesic_distances(graph))	print(dijkstra(csgraph=csr_matrix(graph), directed=False))		save_history()
2024-11-15-02-44-30 100 38 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    num_samples = knn_graph.shape[0]	    geodesic_distances = np.zeros((num_samples, num_samples))	    knn_cs_graph = csr_matrix(knn_graph)	    for i in range(num_samples):	        distances_vector = dijkstra(csgraph=knn_cs_graph, indices=i)	        geodesic_distances[i] = distances_vector	    return geodesic_distances		graph = np.array([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	    ])	print(compute_geodesic_distances(graph))	print(dijkstra(csgraph=csr_matrix(graph), directed=False))		save_history()
2024-11-15-02-44-30 100 39 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    num_samples = knn_graph.shape[0]	    geodesic_distances = np.zeros((num_samples, num_samples))	    knn_cs_graph = csr_matrix(knn_graph)	    for i in range(num_samples):	        distances_vector = dijkstra(csgraph=knn_cs_graph, indices=i, directed=False)	        geodesic_distances[i] = distances_vector	    return geodesic_distances		graph = np.array([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	    ])	print(compute_geodesic_distances(graph))	print(dijkstra(csgraph=csr_matrix(graph), directed=False))		save_history()
2024-11-15-02-44-30 100 40 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    num_samples = knn_graph.shape[0]	    geodesic_distances = np.zeros((num_samples, num_samples))	    knn_cs_graph = csr_matrix(knn_graph)	    for i in range(num_samples):	        distances_vector = dijkstra(csgraph=knn_cs_graph, indices=i)	        geodesic_distances[i] = distances_vector	    return geodesic_distances		graph = np.array([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	    ])	print(compute_geodesic_distances(graph))	print(dijkstra(csgraph=csr_matrix(graph), directed=False))		save_history()
2024-11-15-02-44-30 100 41 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    num_samples = knn_graph.shape[0]	    geodesic_distances = np.zeros((num_samples, num_samples))	    knn_cs_graph = csr_matrix(knn_graph)	    for i in range(num_samples):	        distances_vector = dijkstra(csgraph=knn_cs_graph, indices=i)	        geodesic_distances[i] = distances_vector	    return geodesic_distances		# graph = np.array([	#     [0, 1, 2, 0],	#     [0, 0, 0, 1],	#     [0, 0, 0, 3],	#     [0, 0, 0, 0]	#     ])	# print(compute_geodesic_distances(graph))	# print(dijkstra(csgraph=csr_matrix(graph), directed=False))		save_history()
2024-11-15-02-44-30 100 42 from sklearn.manifold import MDS		def apply_mds(geodesic_distances: np.ndarray, n_components: int) -> np.ndarray:	    embedding = MDS(n_components=n_components)	    reduced_data = embedding.fit_transform(geodesic_distances)	    return reduced_data		save_history()
2024-11-15-02-44-30 100 43 def isomap(data: np.ndarray, n_components: int, k: int) -> np.ndarray:	    knn_graph = construct_knn_graph(data, k)	    geodesic_distances = compute_geodesic_distances(knn_graph)	    reduced_data = apply_mds(geodesic_distances, n_components)	    return reduced_data		save_history()
2024-11-15-02-44-30 100 44 def isomap(data: np.ndarray, n_components: int, k: int) -> np.ndarray:	    knn_graph = construct_knn_graph(data, k)	    geodesic_distances = compute_geodesic_distances(knn_graph)	    reduced_data = apply_mds(geodesic_distances, n_components)	    return reduced_data		from sklearn.datasets import load_digits	from sklearn.manifold import Isomap	X, _ = load_digits(return_X_y=True)	data = X[:20]	embedding = Isomap(n_components=2)	print(embedding.fit_transform(data))		save_history()
2024-11-15-02-44-30 100 45 def isomap(data: np.ndarray, n_components: int, k: int) -> np.ndarray:	    knn_graph = construct_knn_graph(data, k)	    geodesic_distances = compute_geodesic_distances(knn_graph)	    reduced_data = apply_mds(geodesic_distances, n_components)	    return reduced_data		from sklearn.datasets import load_digits	from sklearn.manifold import Isomap	X, _ = load_digits(return_X_y=True)	data = X[:20]	embedding = Isomap(n_components=2)	print(embedding.fit_transform(data))	print(isomap(data, 2, 2))		save_history()
2024-11-15-02-44-30 100 46 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    num_samples = knn_graph.shape[0]	    geodesic_distances = np.zeros((num_samples, num_samples))	    knn_cs_graph = csr_matrix(knn_graph)	    for i in range(num_samples):	        distances_vector = dijkstra(csgraph=knn_cs_graph, indices=i, directed=False)	        geodesic_distances[i] = distances_vector	    return geodesic_distances		# graph = np.array([	#     [0, 1, 2, 0],	#     [0, 0, 0, 1],	#     [0, 0, 0, 3],	#     [0, 0, 0, 0]	#     ])	# print(compute_geodesic_distances(graph))	# print(dijkstra(csgraph=csr_matrix(graph), directed=False))		save_history()
2024-11-15-02-44-30 100 47 def isomap(data: np.ndarray, n_components: int, k: int) -> np.ndarray:	    knn_graph = construct_knn_graph(data, k)	    geodesic_distances = compute_geodesic_distances(knn_graph)	    reduced_data = apply_mds(geodesic_distances, n_components)	    return reduced_data		from sklearn.datasets import load_digits	from sklearn.manifold import Isomap	X, _ = load_digits(return_X_y=True)	data = X[:20]	embedding = Isomap(n_components=2)	print(embedding.fit_transform(data))	print(isomap(data, 2, 2))		save_history()
2024-11-15-02-44-30 100 48 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    num_samples = knn_graph.shape[0]	    geodesic_distances = np.zeros((num_samples, num_samples))	    knn_cs_graph = csr_matrix(knn_graph)	    for i in range(num_samples):	        distances_vector = dijkstra(csgraph=knn_cs_graph, indices=i)	        geodesic_distances[i] = distances_vector	    return geodesic_distances		# graph = np.array([	#     [0, 1, 2, 0],	#     [0, 0, 0, 1],	#     [0, 0, 0, 3],	#     [0, 0, 0, 0]	#     ])	# print(compute_geodesic_distances(graph))	# print(dijkstra(csgraph=csr_matrix(graph), directed=False))		save_history()
2024-11-15-02-44-30 100 49 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    for i, (distances_vector, indices_vector) in enumerate(zip(distances, indices)):	        for distance, j in zip(distances_vector, indices_vector):	            knn_graph[i, j] = distance	            knn_graph[j, i] = distance	    return knn_graph		# X = [[0], [3], [1]]	# k = 2	# neigh = NearestNeighbors(n_neighbors=k)	# neigh.fit(X)	# print(neigh.kneighbors_graph(X, mode='distance').toarray())	# print(construct_knn_graph(np.array(X), k))		save_history()
2024-11-15-02-44-30 100 50 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    num_samples = knn_graph.shape[0]	    geodesic_distances = np.zeros((num_samples, num_samples))	    knn_cs_graph = csr_matrix(knn_graph)	    for i in range(num_samples):	        distances_vector = dijkstra(csgraph=knn_cs_graph, indices=i)	        geodesic_distances[i] = distances_vector	    return geodesic_distances		# graph = np.array([	#     [0, 1, 2, 0],	#     [0, 0, 0, 1],	#     [0, 0, 0, 3],	#     [0, 0, 0, 0]	#     ])	# print(compute_geodesic_distances(graph))	# print(dijkstra(csgraph=csr_matrix(graph), directed=False))		save_history()
2024-11-15-02-44-30 100 51 def isomap(data: np.ndarray, n_components: int, k: int) -> np.ndarray:	    knn_graph = construct_knn_graph(data, k)	    geodesic_distances = compute_geodesic_distances(knn_graph)	    reduced_data = apply_mds(geodesic_distances, n_components)	    return reduced_data		from sklearn.datasets import load_digits	from sklearn.manifold import Isomap	X, _ = load_digits(return_X_y=True)	data = X[:20]	embedding = Isomap(n_components=2)	print(embedding.fit_transform(data))	print(isomap(data, 2, 2))		save_history()
2024-11-15-02-44-30 100 52 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    for i, (distances_vector, indices_vector) in enumerate(zip(distances, indices)):	        for distance, j in zip(distances_vector, indices_vector):	            knn_graph[i, j] = distance	    return knn_graph		# X = [[0], [3], [1]]	# k = 2	# neigh = NearestNeighbors(n_neighbors=k)	# neigh.fit(X)	# print(neigh.kneighbors_graph(X, mode='distance').toarray())	# print(construct_knn_graph(np.array(X), k))		save_history()
2024-11-15-02-44-30 100 53 def isomap(data: np.ndarray, n_components: int, k: int) -> np.ndarray:	    knn_graph = construct_knn_graph(data, k)	    geodesic_distances = compute_geodesic_distances(knn_graph)	    reduced_data = apply_mds(geodesic_distances, n_components)	    return reduced_data		from sklearn.datasets import load_digits	from sklearn.manifold import Isomap	X, _ = load_digits(return_X_y=True)	data = X[:20]	embedding = Isomap(n_components=2)	print(embedding.fit_transform(data))	print(isomap(data, 2, 2))		save_history()
2024-11-15-02-44-30 100 54 def isomap(data: np.ndarray, n_components: int, k: int) -> np.ndarray:	    knn_graph = construct_knn_graph(data, k)	    geodesic_distances = compute_geodesic_distances(knn_graph)	    reduced_data = apply_mds(geodesic_distances, n_components)	    return reduced_data		from sklearn.datasets import load_digits	from sklearn.manifold import Isomap	X, _ = load_digits(return_X_y=True)	data = X[:20]	embedding = Isomap(n_components=2)	print(embedding.fit_transform(data))	print(isomap(data, 2, 1))		save_history()
2024-11-15-02-44-30 100 55 def isomap(data: np.ndarray, n_components: int, k: int) -> np.ndarray:	    knn_graph = construct_knn_graph(data, k)	    geodesic_distances = compute_geodesic_distances(knn_graph)	    reduced_data = apply_mds(geodesic_distances, n_components)	    return reduced_data		from sklearn.datasets import load_digits	from sklearn.manifold import Isomap	X, _ = load_digits(return_X_y=True)	data = X[:100]	embedding = Isomap(n_components=2)	print(embedding.fit_transform(data))	print(isomap(data, 2, 1))		save_history()
2024-11-15-02-44-30 100 56 def isomap(data: np.ndarray, n_components: int, k: int) -> np.ndarray:	    knn_graph = construct_knn_graph(data, k)	    geodesic_distances = compute_geodesic_distances(knn_graph)	    reduced_data = apply_mds(geodesic_distances, n_components)	    return reduced_data		from sklearn.datasets import load_digits	from sklearn.manifold import Isomap	X, _ = load_digits(return_X_y=True)	data = X[:100]	embedding = Isomap(n_components=2)	print(embedding.fit_transform(data))	print(isomap(data, 2, 20))		save_history()
2024-11-15-02-44-30 100 57 import numpy as np	import matplotlib.pyplot as plt		# Step 1: Generate 5-dimensional data with overlapping clusters	# We create 3 clusters with significant overlap	np.random.seed(42)	num_clusters = 3	num_dimensions = 5	num_points = np.array([100, 100, 100])	cluster_std_devs = np.array([1.5, 2.5, 2.5])  # High std dev for overlap	center_std_dev = 5.0  # Spread out the cluster centers more		# Generate the dataset	data, labels = create_dataset(num_clusters, num_dimensions, num_points, cluster_std_devs, center_std_dev)		# Step 2: Introduce missing values into the dataset (10% of the data)	nan_data = data.copy()	num_elements = nan_data.size	num_nan = int(0.1 * num_elements)  # 10% of the data	nan_indices = np.random.choice(num_elements, num_nan, replace=False)	nan_data.ravel()[nan_indices] = np.nan		# Step 3: Impute missing values using low-rank SVD with rank 4	imputed_data = impute_missing_values(nan_data, rank=4)		# Step 4: Apply ISOMAP to reduce to 2D for visualization	n_components = 2	data_2d = isomap(imputed_data, n_components=n_components, k=5)		# Step 5: Apply kmeans clustering and calculate silhouette scores for each cluster count	n_clusters_range = range(2, 9)	silhouette_scores = []		for n_clusters in n_clusters_range:	    # Apply kmeans clustering to the reduced data	    centroids, cluster_labels = kmeans(data_2d, k=n_clusters, max_iter=100, tol=1e-4)	    	    # Calculate the silhouette score for the current number of clusters	    _, mean_silhouette_score = silhouette_score(data_2d, cluster_labels)	    silhouette_scores.append(mean_silhouette_score)		# Step 6: Identify the best number of clusters based on silhouette score	best_n_clusters = n_clusters_range[np.argmax(silhouette_scores)]	best_silhouette_score = max(silhouette_scores)		# Print the results	print(f"Best number of clusters: {best_n_clusters}")	print(f"Best silhouette score: {best_silhouette_score:.3f}")		# Plot silhouette scores vs. number of clusters	plt.figure(figsize=(10, 6))	plt.plot(n_clusters_range, silhouette_scores, marker='o')	plt.title("Silhouette Scores for Different Numbers of Clusters")	plt.xlabel("Number of Clusters")	plt.ylabel("Mean Silhouette Score")	plt.show()
2024-11-15-02-44-30 100 58 get_ipython().run_line_magic('matplotlib', 'inline')	import matplotlib.pyplot as plt	from typing import Tuple	import numpy as np	import scipy as sp	from submission_utils import save_history, check_and_prepare_for_submission	# import warnings filter	from warnings import simplefilter	# ignore all future warnings	simplefilter(action='ignore', category=FutureWarning)
2024-11-15-02-44-30 100 59 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    data = np.array(data)	    labels = np.array(labels)	    return (data, labels)	# data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)		save_history()
2024-11-15-02-44-30 100 60 # This cell is reserved for the unit tests. Do not consider this cell. 
2024-11-15-02-44-30 100 61 # This cell is reserved for the unit tests. Do not consider this cell. 
2024-11-15-02-44-30 100 62 # from sklearn.decomposition import PCA	# from sklearn.datasets import load_iris		def pca_with_svd(data: np.ndarray, n_components: int) -> np.ndarray:	    centred_data = data - np.mean(data, axis=0)	    u, s, vh = np.linalg.svd(centred_data)	    transformed_data = centred_data.dot(vh.T[:, :n_components])	    return transformed_data		# df = load_iris()	# X = df.data	# pca = PCA(n_components=2)	# X_proj = pca.fit_transform(X)	# print(X_proj)	# Y = df.data	# print(pca_with_svd(Y, 2))	save_history()
2024-11-15-02-44-30 100 63 # This cell is reserved for the unit tests. Do not consider this cell. 
2024-11-15-02-44-30 100 64 import matplotlib.pyplot as plt	from sklearn.decomposition import PCA		def plot_dataset(data: np.ndarray, labels: np.ndarray) -> None:	    if (data.ndim == 1):	        return	    data_2d = PCA(n_components=2).fit_transform(data)	    plt.scatter(*data_2d.T, c=labels)	    plt.axis('equal')	    plt.xlabel('First PCA component')	    plt.ylabel('Second PCA component')	    plt.grid()	    plt.show()	    return		save_history()
2024-11-15-02-44-30 100 65 # This cell is reserved for the unit tests. Do not consider this cell. 
2024-11-15-02-44-30 100 66 def impute_missing_values(data: np.ndarray, rank: int) -> np.ndarray:	    no_nan_data = np.nan_to_num(data, nan=0)	    u, s, vh = np.linalg.svd(no_nan_data)	    s = np.diag(s)	    num_cols_u = u.shape[1]	    if num_cols_u > rank:	        u_trunc = u[:, :rank]	    else:	        u_trunc = u	    num_cols_vh = vh.shape[1]	    if num_cols_vh > rank:	        vh_trunc = vh[:rank, :]	    else:	        vh_trunc = vh	    num_sinuglar_values = s.shape[0]	    if num_sinuglar_values > rank:	        s_trunc = s[:rank, :rank]	    else:	        s_trunc = s	    trunc_svd_data = np.dot(np.dot(u_trunc, s_trunc), vh_trunc)	    nan_mask = np.isnan(data)	    nan_indices = np.where(nan_mask)	    imputed_data = data.copy()	    for row_ind, col_ind in zip(nan_indices[0], nan_indices[1]):	        impute_value = trunc_svd_data[row_ind, col_ind]	        imputed_data[row_ind, col_ind] = impute_value	    return imputed_data		save_history()
2024-11-15-02-44-30 100 67 # This cell is reserved for the unit tests. Do not consider this cell. 
2024-11-15-02-44-30 100 68 # Step 1: Create a 5-dimensional dataset with 3 clusters	num_clusters = 3	num_dimensions = 5	num_points = np.array([100, 100, 100])	cluster_std_devs = np.array([1.0, 1.0, 1.0])	center_std_dev = 3.0		data, labels = create_dataset(num_clusters, num_dimensions, num_points, cluster_std_devs, center_std_dev)		# Step 2: Plot the original data (2D projection using PCA)	print("Original Data (2D projection)")	plot_dataset(data, labels)		# Step 3: Introduce 10% missing values	nan_data = data.copy()	num_elements = nan_data.size	num_nan = int(0.1 * num_elements)  # 10% of the data		# Randomly choose 10% of indices to set as NaN	nan_indices = np.random.choice(num_elements, num_nan, replace=False)	nan_data.ravel()[nan_indices] = np.nan		# Step 4: Impute missing values using rank-4 SVD approximation	imputed_data = impute_missing_values(nan_data, rank=4)		# Step 5: Plot the imputed data (2D projection using PCA)	print("Imputed Data (2D projection)")	plot_dataset(imputed_data, labels)
2024-11-15-02-44-30 100 69 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    for i, (distances_vector, indices_vector) in enumerate(zip(distances, indices)):	        for distance, j in zip(distances_vector, indices_vector):	            knn_graph[i, j] = distance	    return knn_graph		# X = [[0], [3], [1]]	# k = 2	# neigh = NearestNeighbors(n_neighbors=k)	# neigh.fit(X)	# print(neigh.kneighbors_graph(X, mode='distance').toarray())	# print(construct_knn_graph(np.array(X), k))		save_history()
2024-11-15-02-44-30 100 70 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    num_samples = knn_graph.shape[0]	    geodesic_distances = np.zeros((num_samples, num_samples))	    knn_cs_graph = csr_matrix(knn_graph)	    for i in range(num_samples):	        distances_vector = dijkstra(csgraph=knn_cs_graph, indices=i)	        geodesic_distances[i] = distances_vector	    return geodesic_distances		# graph = np.array([	#     [0, 1, 2, 0],	#     [0, 0, 0, 1],	#     [0, 0, 0, 3],	#     [0, 0, 0, 0]	#     ])	# print(compute_geodesic_distances(graph))	# print(dijkstra(csgraph=csr_matrix(graph), directed=False))		save_history()
2024-11-15-02-44-30 100 71 from sklearn.manifold import MDS		def apply_mds(geodesic_distances: np.ndarray, n_components: int) -> np.ndarray:	    embedding = MDS(n_components=n_components)	    reduced_data = embedding.fit_transform(geodesic_distances)	    return reduced_data		save_history()
2024-11-15-02-44-30 100 72 def isomap(data: np.ndarray, n_components: int, k: int) -> np.ndarray:	    knn_graph = construct_knn_graph(data, k)	    geodesic_distances = compute_geodesic_distances(knn_graph)	    reduced_data = apply_mds(geodesic_distances, n_components)	    return reduced_data		from sklearn.datasets import load_digits	from sklearn.manifold import Isomap	X, _ = load_digits(return_X_y=True)	data = X[:100]	embedding = Isomap(n_components=2)	print(embedding.fit_transform(data))	print(isomap(data, 2, 20))		save_history()
2024-11-15-02-44-30 100 73 # This cell is reserved for the unit tests. Do not consider this cell. 
2024-11-15-02-44-30 100 74 # This cell is reserved for the unit tests. Do not consider this cell. 
2024-11-15-02-44-30 100 75 # This cell is reserved for the unit tests. Do not consider this cell. 
2024-11-15-02-44-30 100 76 # This cell is reserved for the unit tests. Do not consider this cell. 
2024-11-15-02-44-30 100 77 def initialize_centroids(data: np.ndarray, k: int) -> np.ndarray:	    centroids = []	    num_samples = data.shape[0]	    for _ in range(k):	        rand_ind = np.random.choice(num_samples)	        rand_data_point = data[rand_ind]	        centroids.append(rand_data_point)	    centroids = np.array(centroids)	    return centroids		# dummies = np.arange(99)	# dummies.shape = (-1, 3)	# print(initialize_centroids(dummies, 5))		save_history()
2024-11-15-02-44-30 100 78 # This cell is reserved for the unit tests. Do not consider this cell. 
2024-11-15-02-44-30 100 79 def assign_clusters(data: np.ndarray, centroids: np.ndarray) -> np.ndarray:	    num_clusters = centroids.shape[0]	    labels = []	    for data_point in data:	        best_centroid_ind = 0	        best_euclidean_distance = 1e9	        for i in range (num_clusters):	            centroid = centroids[i]	            euclidean_distance = sum((centroid_val - data_point_val) ** 2 for centroid_val, data_point_val in zip(centroid, data_point)) ** 0.5	            if (euclidean_distance < best_euclidean_distance):	                best_euclidean_distance = euclidean_distance	                best_centroid_ind = i	        labels.append(best_centroid_ind)	    labels = np.array(labels)	    return labels		# dummies = np.random.normal(scale=20, size=(100, 3))	# print(dummies)	# print(assign_clusters(dummies, initialize_centroids(dummies, 5)))		save_history()
2024-11-15-02-44-30 100 80 # This cell is reserved for the unit tests. Do not consider this cell. 
2024-11-15-02-44-30 100 81 def update_centroids(data: np.ndarray, labels: np.ndarray, k: int) -> np.ndarray:	    clusters = {}	    for i in range(k):	        clusters[f"{i}"] = []	    for i, data_point in enumerate(data):	        clusters[f"{labels[i]}"].append(data_point)	    new_centroids = []	    for i in range(k):	        cluster = np.array(clusters[f"{i}"])	        new_centroids.append(np.array([np.mean(feature) for feature in cluster.T]))		    new_centroids = np.array(new_centroids)	    return new_centroids		# dummies = np.random.normal(scale=20, size=(100, 3))	# labels = assign_clusters(dummies, initialize_centroids(dummies, 5))	# print(update_centroids(dummies, labels, 5))		save_history()
2024-11-15-02-44-30 100 82 # This cell is reserved for the unit tests. Do not consider this cell. 
2024-11-15-02-44-30 100 83 def kmeans(data: np.ndarray, k: int, max_iter: int = 100, tol: float = 1e-4) -> Tuple[np.ndarray, np.ndarray]:	    centroids = initialize_centroids(data, k)	    labels = assign_clusters(data, centroids)	    max_movement = 1e9	    while (tol < max_movement and max_iter > 0):	        old_centroids = centroids.copy()	        centroids = update_centroids(data, labels, k)	        movements = []	        for i in range(centroids.shape[0]):	            old_centroid = old_centroids[i]	            centroid = centroids[i]	            movements.append(sum((old_val - val) ** 2 for old_val, val in zip(old_centroid, centroid)) ** 0.5)	        max_movement = max(movements)	        labels = assign_clusters(data, centroids)	        max_iter -= 1	    return (centroids, labels)		# true_centroids = [[0, 0], [-5, -5], [5, 5]]	# clusters = [np.random.randn(100, 2) + true_centroid for true_centroid in true_centroids]	# data = np.vstack(clusters)	# print(kmeans(data, len(true_centroids)))		save_history()
2024-11-15-02-44-30 100 84 # This cell is reserved for the unit tests. Do not consider this cell. 
2024-11-15-02-44-30 100 85 def within_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    # YOUR CODE HERE	    raise NotImplementedError()		save_history()
2024-11-15-02-44-30 100 86 # This cell is reserved for the unit tests. Do not consider this cell. 
2024-11-15-02-44-30 100 87 def nearest_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    # YOUR CODE HERE	    raise NotImplementedError()		save_history()
2024-11-15-02-44-30 100 88 # This cell is reserved for the unit tests. Do not consider this cell. 
2024-11-15-02-44-30 100 89 def silhouette_score(data: np.ndarray, labels: np.ndarray) -> Tuple[np.ndarray, float]:	    # YOUR CODE HERE	    raise NotImplementedError()		save_history()
2024-11-15-02-44-30 100 90 # This cell is reserved for the unit tests. Do not consider this cell. 
2024-11-15-02-44-30 100 91 import numpy as np	import matplotlib.pyplot as plt		# Step 1: Generate 5-dimensional data with overlapping clusters	# We create 3 clusters with significant overlap	np.random.seed(42)	num_clusters = 3	num_dimensions = 5	num_points = np.array([100, 100, 100])	cluster_std_devs = np.array([1.5, 2.5, 2.5])  # High std dev for overlap	center_std_dev = 5.0  # Spread out the cluster centers more		# Generate the dataset	data, labels = create_dataset(num_clusters, num_dimensions, num_points, cluster_std_devs, center_std_dev)		# Step 2: Introduce missing values into the dataset (10% of the data)	nan_data = data.copy()	num_elements = nan_data.size	num_nan = int(0.1 * num_elements)  # 10% of the data	nan_indices = np.random.choice(num_elements, num_nan, replace=False)	nan_data.ravel()[nan_indices] = np.nan		# Step 3: Impute missing values using low-rank SVD with rank 4	imputed_data = impute_missing_values(nan_data, rank=4)		# Step 4: Apply ISOMAP to reduce to 2D for visualization	n_components = 2	data_2d = isomap(imputed_data, n_components=n_components, k=5)		# Step 5: Apply kmeans clustering and calculate silhouette scores for each cluster count	n_clusters_range = range(2, 9)	silhouette_scores = []		for n_clusters in n_clusters_range:	    # Apply kmeans clustering to the reduced data	    centroids, cluster_labels = kmeans(data_2d, k=n_clusters, max_iter=100, tol=1e-4)	    	    # Calculate the silhouette score for the current number of clusters	    _, mean_silhouette_score = silhouette_score(data_2d, cluster_labels)	    silhouette_scores.append(mean_silhouette_score)		# Step 6: Identify the best number of clusters based on silhouette score	best_n_clusters = n_clusters_range[np.argmax(silhouette_scores)]	best_silhouette_score = max(silhouette_scores)		# Print the results	print(f"Best number of clusters: {best_n_clusters}")	print(f"Best silhouette score: {best_silhouette_score:.3f}")		# Plot silhouette scores vs. number of clusters	plt.figure(figsize=(10, 6))	plt.plot(n_clusters_range, silhouette_scores, marker='o')	plt.title("Silhouette Scores for Different Numbers of Clusters")	plt.xlabel("Number of Clusters")	plt.ylabel("Mean Silhouette Score")	plt.show()
2024-11-15-02-44-30 100 92 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    num_samples = knn_graph.shape[0]	    geodesic_distances = np.zeros((num_samples, num_samples))	    knn_cs_graph = csr_matrix(knn_graph)	    for i in range(num_samples):	        distances_vector = dijkstra(csgraph=knn_cs_graph, indices=i)	        geodesic_distances[i] = distances_vector	    print(geodesic_distances)	    return geodesic_distances		# graph = np.array([	#     [0, 1, 2, 0],	#     [0, 0, 0, 1],	#     [0, 0, 0, 3],	#     [0, 0, 0, 0]	#     ])	# print(compute_geodesic_distances(graph))	# print(dijkstra(csgraph=csr_matrix(graph), directed=False))		save_history()
2024-11-15-02-44-30 100 93 import numpy as np	import matplotlib.pyplot as plt		# Step 1: Generate 5-dimensional data with overlapping clusters	# We create 3 clusters with significant overlap	np.random.seed(42)	num_clusters = 3	num_dimensions = 5	num_points = np.array([100, 100, 100])	cluster_std_devs = np.array([1.5, 2.5, 2.5])  # High std dev for overlap	center_std_dev = 5.0  # Spread out the cluster centers more		# Generate the dataset	data, labels = create_dataset(num_clusters, num_dimensions, num_points, cluster_std_devs, center_std_dev)		# Step 2: Introduce missing values into the dataset (10% of the data)	nan_data = data.copy()	num_elements = nan_data.size	num_nan = int(0.1 * num_elements)  # 10% of the data	nan_indices = np.random.choice(num_elements, num_nan, replace=False)	nan_data.ravel()[nan_indices] = np.nan		# Step 3: Impute missing values using low-rank SVD with rank 4	imputed_data = impute_missing_values(nan_data, rank=4)		# Step 4: Apply ISOMAP to reduce to 2D for visualization	n_components = 2	data_2d = isomap(imputed_data, n_components=n_components, k=5)		# Step 5: Apply kmeans clustering and calculate silhouette scores for each cluster count	n_clusters_range = range(2, 9)	silhouette_scores = []		for n_clusters in n_clusters_range:	    # Apply kmeans clustering to the reduced data	    centroids, cluster_labels = kmeans(data_2d, k=n_clusters, max_iter=100, tol=1e-4)	    	    # Calculate the silhouette score for the current number of clusters	    _, mean_silhouette_score = silhouette_score(data_2d, cluster_labels)	    silhouette_scores.append(mean_silhouette_score)		# Step 6: Identify the best number of clusters based on silhouette score	best_n_clusters = n_clusters_range[np.argmax(silhouette_scores)]	best_silhouette_score = max(silhouette_scores)		# Print the results	print(f"Best number of clusters: {best_n_clusters}")	print(f"Best silhouette score: {best_silhouette_score:.3f}")		# Plot silhouette scores vs. number of clusters	plt.figure(figsize=(10, 6))	plt.plot(n_clusters_range, silhouette_scores, marker='o')	plt.title("Silhouette Scores for Different Numbers of Clusters")	plt.xlabel("Number of Clusters")	plt.ylabel("Mean Silhouette Score")	plt.show()
2024-11-15-02-44-30 100 94 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    for i, (distances_vector, indices_vector) in enumerate(zip(distances, indices)):	        for distance, j in zip(distances_vector, indices_vector):	            knn_graph[i, j] = distance	            knn_graph[j, i] = distance	    return knn_graph		# X = [[0], [3], [1]]	# k = 2	# neigh = NearestNeighbors(n_neighbors=k)	# neigh.fit(X)	# print(neigh.kneighbors_graph(X, mode='distance').toarray())	# print(construct_knn_graph(np.array(X), k))		save_history()
2024-11-15-02-44-30 100 95 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    num_samples = knn_graph.shape[0]	    geodesic_distances = np.zeros((num_samples, num_samples))	    knn_cs_graph = csr_matrix(knn_graph)	    for i in range(num_samples):	        distances_vector = dijkstra(csgraph=knn_cs_graph, indices=i, directed=False)	        geodesic_distances[i] = distances_vector	    print(geodesic_distances)	    return geodesic_distances		# graph = np.array([	#     [0, 1, 2, 0],	#     [0, 0, 0, 1],	#     [0, 0, 0, 3],	#     [0, 0, 0, 0]	#     ])	# print(compute_geodesic_distances(graph))	# print(dijkstra(csgraph=csr_matrix(graph), directed=False))		save_history()
2024-11-15-02-44-30 100 96 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    num_samples = knn_graph.shape[0]	    geodesic_distances = np.zeros((num_samples, num_samples))	    knn_cs_graph = csr_matrix(knn_graph)	    for i in range(num_samples):	        distances_vector = dijkstra(csgraph=knn_cs_graph, indices=i, directed=False)	        geodesic_distances[i] = distances_vector	    print(geodesic_distances)	    return geodesic_distances		# graph = np.array([	#     [0, 1, 2, 0],	#     [0, 0, 0, 1],	#     [0, 0, 0, 3],	#     [0, 0, 0, 0]	#     ])	# print(compute_geodesic_distances(graph))	# print(dijkstra(csgraph=csr_matrix(graph), directed=False))		save_history()
2024-11-15-02-44-30 100 97 from sklearn.manifold import MDS		def apply_mds(geodesic_distances: np.ndarray, n_components: int) -> np.ndarray:	    embedding = MDS(n_components=n_components)	    reduced_data = embedding.fit_transform(geodesic_distances)	    return reduced_data		save_history()
2024-11-15-02-44-30 100 98 def isomap(data: np.ndarray, n_components: int, k: int) -> np.ndarray:	    knn_graph = construct_knn_graph(data, k)	    geodesic_distances = compute_geodesic_distances(knn_graph)	    reduced_data = apply_mds(geodesic_distances, n_components)	    return reduced_data		from sklearn.datasets import load_digits	from sklearn.manifold import Isomap	X, _ = load_digits(return_X_y=True)	data = X[:100]	embedding = Isomap(n_components=2)	print(embedding.fit_transform(data))	print(isomap(data, 2, 20))		save_history()
2024-11-15-02-44-30 100 99 def isomap(data: np.ndarray, n_components: int, k: int) -> np.ndarray:	    knn_graph = construct_knn_graph(data, k)	    geodesic_distances = compute_geodesic_distances(knn_graph)	    reduced_data = apply_mds(geodesic_distances, n_components)	    return reduced_data		from sklearn.datasets import load_digits	from sklearn.manifold import Isomap	X, _ = load_digits(return_X_y=True)	data = X[:100]	embedding = Isomap(n_components=2)	print(embedding.fit_transform(data))	print(isomap(data, 2, 5))		save_history()
2024-11-15-02-44-30 100 100 def isomap(data: np.ndarray, n_components: int, k: int) -> np.ndarray:	    knn_graph = construct_knn_graph(data, k)	    geodesic_distances = compute_geodesic_distances(knn_graph)	    reduced_data = apply_mds(geodesic_distances, n_components)	    return reduced_data		from sklearn.datasets import load_digits	from sklearn.manifold import Isomap	X, _ = load_digits(return_X_y=True)	data = X[:100]	embedding = Isomap(n_components=2)	print(embedding.fit_transform(data))	print(isomap(data, 2, 1))		save_history()
2024-11-15-02-44-30 100 101 import numpy as np	import matplotlib.pyplot as plt		# Step 1: Generate 5-dimensional data with overlapping clusters	# We create 3 clusters with significant overlap	np.random.seed(42)	num_clusters = 3	num_dimensions = 5	num_points = np.array([100, 100, 100])	cluster_std_devs = np.array([1.5, 2.5, 2.5])  # High std dev for overlap	center_std_dev = 5.0  # Spread out the cluster centers more		# Generate the dataset	data, labels = create_dataset(num_clusters, num_dimensions, num_points, cluster_std_devs, center_std_dev)		# Step 2: Introduce missing values into the dataset (10% of the data)	nan_data = data.copy()	num_elements = nan_data.size	num_nan = int(0.1 * num_elements)  # 10% of the data	nan_indices = np.random.choice(num_elements, num_nan, replace=False)	nan_data.ravel()[nan_indices] = np.nan		# Step 3: Impute missing values using low-rank SVD with rank 4	imputed_data = impute_missing_values(nan_data, rank=4)		# Step 4: Apply ISOMAP to reduce to 2D for visualization	n_components = 2	data_2d = isomap(imputed_data, n_components=n_components, k=5)		# Step 5: Apply kmeans clustering and calculate silhouette scores for each cluster count	n_clusters_range = range(2, 9)	silhouette_scores = []		for n_clusters in n_clusters_range:	    # Apply kmeans clustering to the reduced data	    centroids, cluster_labels = kmeans(data_2d, k=n_clusters, max_iter=100, tol=1e-4)	    	    # Calculate the silhouette score for the current number of clusters	    _, mean_silhouette_score = silhouette_score(data_2d, cluster_labels)	    silhouette_scores.append(mean_silhouette_score)		# Step 6: Identify the best number of clusters based on silhouette score	best_n_clusters = n_clusters_range[np.argmax(silhouette_scores)]	best_silhouette_score = max(silhouette_scores)		# Print the results	print(f"Best number of clusters: {best_n_clusters}")	print(f"Best silhouette score: {best_silhouette_score:.3f}")		# Plot silhouette scores vs. number of clusters	plt.figure(figsize=(10, 6))	plt.plot(n_clusters_range, silhouette_scores, marker='o')	plt.title("Silhouette Scores for Different Numbers of Clusters")	plt.xlabel("Number of Clusters")	plt.ylabel("Mean Silhouette Score")	plt.show()
