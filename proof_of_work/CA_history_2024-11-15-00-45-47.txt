2024-11-15-00-45-47 100 1 get_ipython().run_line_magic('matplotlib', 'inline')	import matplotlib.pyplot as plt	from typing import Tuple	import numpy as np	import scipy as sp	from submission_utils import save_history, check_and_prepare_for_submission	# import warnings filter	from warnings import simplefilter	# ignore all future warnings	simplefilter(action='ignore', category=FutureWarning)
2024-11-15-00-45-47 100 2 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    nearest_neighbours = NearestNeighbors(n_neighbors=k)	    knn_graph = nearest_neighbours.fit(data)	    return knn_graph		save_history()
2024-11-15-00-45-47 100 3 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    	    return		save_history()
2024-11-15-00-45-47 100 4 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    for i, neighbours in enumerate(indices):	        for j in neighbours:	            knn_graph[i, j] = distances[i, j]	    return		X = [[0], [3], [1]]	neigh = NearestNeighbors(n_neighbors=2)	neigh.fit(X)	print(neigh.kneighbors_graph(X).toarray())		save_history()
2024-11-15-00-45-47 100 5 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    return distances		X = [[0], [3], [1]]	neigh = NearestNeighbors(n_neighbors=2)	neigh.fit(X)	print(neigh.kneighbors_graph(X).toarray())	print(construct_knn_graph(X))		save_history()
2024-11-15-00-45-47 100 6 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    return distances		X = [[0], [3], [1]]	neigh = NearestNeighbors(n_neighbors=2)	neigh.fit(X)	print(neigh.kneighbors_graph(X).toarray())	print(construct_knn_graph(X, 2))		save_history()
2024-11-15-00-45-47 100 7 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    return distances		X = [[0], [3], [1]]	neigh = NearestNeighbors(n_neighbors=2)	neigh.fit(X)	print(neigh.kneighbors_graph(X).toarray())	print(construct_knn_graph(np.array(X), 2))		save_history()
2024-11-15-00-45-47 100 8 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    return distances, indices		X = [[0], [3], [1]]	neigh = NearestNeighbors(n_neighbors=2)	neigh.fit(X)	print(neigh.kneighbors_graph(X).toarray())	print(construct_knn_graph(np.array(X), 2))		save_history()
2024-11-15-00-45-47 100 9 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    return np.vstack((distances, indices))		X = [[0], [3], [1]]	neigh = NearestNeighbors(n_neighbors=2)	neigh.fit(X)	print(neigh.kneighbors_graph(X).toarray())	print(construct_knn_graph(np.array(X), 2))		save_history()
