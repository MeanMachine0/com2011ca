2024-11-15-02-27-44 100 1 get_ipython().run_line_magic('matplotlib', 'inline')	import matplotlib.pyplot as plt	from typing import Tuple	import numpy as np	import scipy as sp	from submission_utils import save_history, check_and_prepare_for_submission	# import warnings filter	from warnings import simplefilter	# ignore all future warnings	simplefilter(action='ignore', category=FutureWarning)
2024-11-15-02-27-44 100 2 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    nearest_neighbours = NearestNeighbors(n_neighbors=k)	    knn_graph = nearest_neighbours.fit(data)	    return knn_graph		save_history()
2024-11-15-02-27-44 100 3 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    	    return		save_history()
2024-11-15-02-27-44 100 4 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    for i, neighbours in enumerate(indices):	        for j in neighbours:	            knn_graph[i, j] = distances[i, j]	    return		X = [[0], [3], [1]]	neigh = NearestNeighbors(n_neighbors=2)	neigh.fit(X)	print(neigh.kneighbors_graph(X).toarray())		save_history()
2024-11-15-02-27-44 100 5 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    return distances		X = [[0], [3], [1]]	neigh = NearestNeighbors(n_neighbors=2)	neigh.fit(X)	print(neigh.kneighbors_graph(X).toarray())	print(construct_knn_graph(X))		save_history()
2024-11-15-02-27-44 100 6 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    return distances		X = [[0], [3], [1]]	neigh = NearestNeighbors(n_neighbors=2)	neigh.fit(X)	print(neigh.kneighbors_graph(X).toarray())	print(construct_knn_graph(X, 2))		save_history()
2024-11-15-02-27-44 100 7 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    return distances		X = [[0], [3], [1]]	neigh = NearestNeighbors(n_neighbors=2)	neigh.fit(X)	print(neigh.kneighbors_graph(X).toarray())	print(construct_knn_graph(np.array(X), 2))		save_history()
2024-11-15-02-27-44 100 8 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    return distances, indices		X = [[0], [3], [1]]	neigh = NearestNeighbors(n_neighbors=2)	neigh.fit(X)	print(neigh.kneighbors_graph(X).toarray())	print(construct_knn_graph(np.array(X), 2))		save_history()
2024-11-15-02-27-44 100 9 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    return np.vstack((distances, indices))		X = [[0], [3], [1]]	neigh = NearestNeighbors(n_neighbors=2)	neigh.fit(X)	print(neigh.kneighbors_graph(X).toarray())	print(construct_knn_graph(np.array(X), 2))		save_history()
2024-11-15-02-27-44 100 10 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    return distances, indices		X = [[0], [3], [1]]	neigh = NearestNeighbors(n_neighbors=2)	neigh.fit(X)	print(neigh.kneighbors_graph(X).toarray())	print(construct_knn_graph(np.array(X), 2))		save_history()
2024-11-15-02-27-44 100 11 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    return np.vstack((distances, indices))		X = [[0], [3], [1]]	neigh = NearestNeighbors(n_neighbors=2)	neigh.fit(X)	print(neigh.kneighbors_graph(X).toarray())	print(construct_knn_graph(np.array(X), 2))		save_history()
2024-11-15-02-27-44 100 12 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k + 1)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    return np.vstack((distances, indices))		X = [[0], [3], [1]]	neigh = NearestNeighbors(n_neighbors=2)	neigh.fit(X)	print(neigh.kneighbors_graph(X).toarray())	print(construct_knn_graph(np.array(X), 2))		save_history()
2024-11-15-02-27-44 100 13 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k + 1)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    for i, (distances_vector, neighbours) in enumerate(zip(distances, indices)):	        for distance, j in zip(distances_vector, neighbours):	            knn_graph[i, j] = distance	            knn_graph[j, i] = distance	    return knn_graph		X = [[0], [3], [1]]	neigh = NearestNeighbors(n_neighbors=2)	neigh.fit(X)	print(neigh.kneighbors_graph(X).toarray())	print(construct_knn_graph(np.array(X), 2))		save_history()
2024-11-15-02-27-44 100 14 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    for i, (distances_vector, neighbours) in enumerate(zip(distances, indices)):	        for distance, j in zip(distances_vector, neighbours):	            knn_graph[i, j] = distance	            knn_graph[j, i] = distance	    return knn_graph		X = [[0], [3], [1]]	neigh = NearestNeighbors(n_neighbors=2)	neigh.fit(X)	print(neigh.kneighbors_graph(X).toarray())	print(construct_knn_graph(np.array(X), 2))		save_history()
2024-11-15-02-27-44 100 15 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    for i, (distances_vector, neighbours) in enumerate(zip(distances, indices)):	        for distance, j in zip(distances_vector, neighbours):	            knn_graph[i, j] = distance	            knn_graph[j, i] = distance	    return knn_graph		X = [[0], [3], [1]]	k = 2	neigh = NearestNeighbors(n_neighbors=k)	neigh.fit(X)	print(neigh.kneighbors_graph(X).toarray())	print(construct_knn_graph(np.array(X), k))		save_history()
2024-11-15-02-27-44 100 16 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    for i, (distances_vector, indices_vector) in enumerate(zip(distances, indices)):	        for distance, j in zip(distances_vector, indices_vector):	            knn_graph[i, j] = distance	            knn_graph[j, i] = distance	    return knn_graph		X = [[0], [3], [1]]	k = 2	neigh = NearestNeighbors(n_neighbors=k)	neigh.fit(X)	print(neigh.kneighbors_graph(X, mode='distance').toarray())	print(construct_knn_graph(np.array(X), k))		save_history()
2024-11-15-02-27-44 100 17 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    for i, (distances_vector, indices_vector) in enumerate(zip(distances, indices)):	        for distance, j in zip(distances_vector, indices_vector):	            knn_graph[i, j] = distance	            knn_graph[j, i] = distance	    return knn_graph		X = [[0], [3], [1]]	k = 2	neigh = NearestNeighbors(n_neighbors=k)	neigh.fit(X)	print(neigh.kneighbors_graph(X, mode='distance').toarray())	print(construct_knn_graph(np.array(X), k))		save_history()
2024-11-15-02-27-44 100 18 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    for i, (distances_vector, indices_vector) in enumerate(zip(distances, indices)):	        for distance, j in zip(distances_vector, indices_vector):	            knn_graph[i, j] = distance	            knn_graph[j, i] = distance	    return knn_graph		X = [[0], [3], [1]]	k = 2	neigh = NearestNeighbors(n_neighbors=k)	neigh.fit(X)	print(neigh.kneighbors_graph(X, mode='distance').toarray())	print(construct_knn_graph(np.array(X), k))		save_history()
2024-11-15-02-27-44 100 19 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    for i, (distances_vector, indices_vector) in enumerate(zip(distances, indices)):	        for distance, j in zip(distances_vector, indices_vector):	            knn_graph[i, j] = distance	            # knn_graph[j, i] = distance	    return knn_graph		X = [[0], [3], [1]]	k = 2	neigh = NearestNeighbors(n_neighbors=k)	neigh.fit(X)	print(neigh.kneighbors_graph(X, mode='distance').toarray())	print(construct_knn_graph(np.array(X), k))		save_history()
2024-11-15-02-27-44 100 20 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    for i, (distances_vector, indices_vector) in enumerate(zip(distances, indices)):	        for distance, j in zip(distances_vector, indices_vector):	            knn_graph[i, j] = distance	    return knn_graph		X = [[0], [3], [1]]	k = 2	neigh = NearestNeighbors(n_neighbors=k)	neigh.fit(X)	print(neigh.kneighbors_graph(X, mode='distance').toarray())	print(construct_knn_graph(np.array(X), k))		save_history()
2024-11-15-02-27-44 100 21 from sklearn.neighbors import NearestNeighbors		def construct_knn_graph(data: np.ndarray, k: int) -> np.ndarray:	    knn = NearestNeighbors(n_neighbors=k)	    knn.fit(data)	    distances, indices = knn.kneighbors(data)	    num_samples = data.shape[0]	    knn_graph = np.zeros((num_samples, num_samples))	    for i, (distances_vector, indices_vector) in enumerate(zip(distances, indices)):	        for distance, j in zip(distances_vector, indices_vector):	            knn_graph[i, j] = distance	    return knn_graph		# X = [[0], [3], [1]]	# k = 2	# neigh = NearestNeighbors(n_neighbors=k)	# neigh.fit(X)	# print(neigh.kneighbors_graph(X, mode='distance').toarray())	# print(construct_knn_graph(np.array(X), k))		save_history()
2024-11-15-02-27-44 100 22 from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    return dijkstra(csgraph=knn_graph)		save_history()
2024-11-15-02-27-44 100 23 from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    return dijkstra(csgraph=knn_graph)		print(compute_geodesic_distances([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	]))		save_history()
2024-11-15-02-27-44 100 24 from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    return dijkstra(csgraph=knn_graph, return_predecessors=True)		print(compute_geodesic_distances([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	]))		save_history()
2024-11-15-02-27-44 100 25 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    graph = csr_matrix(graph)	    return dijkstra(csgraph=graph, return_predecessors=True)		print(compute_geodesic_distances([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	]))		save_history()
2024-11-15-02-27-44 100 26 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    graph = csr_matrix(knn_graph)	    return dijkstra(csgraph=graph, return_predecessors=True)		print(compute_geodesic_distances([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	]))		save_history()
2024-11-15-02-27-44 100 27 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    graph = csr_matrix(knn_graph)	    return dijkstra(csgraph=graph, directed=False, return_predecessors=True)		print(compute_geodesic_distances([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	]))		save_history()
2024-11-15-02-27-44 100 28 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    graph = csr_matrix(knn_graph)	    return dijkstra(csgraph=graph, directed=False, indices=0, return_predecessors=True)		print(compute_geodesic_distances([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	]))		save_history()
2024-11-15-02-27-44 100 29 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    	    return 		graph = np.array([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	    ])	print(compute_geodesic_distances(graph))	cs_graph = csr_matrix(graph)	print(dijkstra(csgraph=cs_graph, directed=False, indices=0, return_predecessors=True))		save_history()
2024-11-15-02-27-44 100 30 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    	    return 		graph = np.array([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	    ])	print(compute_geodesic_distances(graph))	cs_graph = csr_matrix(graph)	print(dijkstra(csgraph=cs_graph, directed=False, return_predecessors=True))		save_history()
2024-11-15-02-27-44 100 31 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    	    return 		graph = np.array([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	    ])	print(compute_geodesic_distances(graph))	cs_graph = csr_matrix(graph)	print(dijkstra(csgraph=cs_graph, directed=False))		save_history()
2024-11-15-02-27-44 100 32 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    	    return 		graph = np.array([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	    ])	print(compute_geodesic_distances(graph))	cs_graph = csr_matrix(graph)	print(dijkstra(csgraph=cs_graph, directed=True))		save_history()
2024-11-15-02-27-44 100 33 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    	    return 		graph = np.array([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	    ])	print(compute_geodesic_distances(graph))	cs_graph = csr_matrix(graph)	print(dijkstra(csgraph=cs_graph, directed=False))		save_history()
2024-11-15-02-27-44 100 34 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    	    return 		graph = np.array([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	    ])	print(compute_geodesic_distances(graph))	cs_graph = csr_matrix(graph)	print(cs_graph)	print(dijkstra(csgraph=cs_graph, directed=False))		save_history()
2024-11-15-02-27-44 100 35 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    num_samples = knn_graph.shape(0)	    geodesic_distances = np.zeros((knn_graph.shape(0), num_samples))	    knn_cs_graph = csr_matrix(knn_graph)	    for i in range(num_samples):	        distances_vector = dijkstra(cs_graph=knn_cs_graph, indices=i)	        geodesic_distances[i] = distances_vector	    return geodesic_distances		graph = np.array([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	    ])	print(compute_geodesic_distances(graph))	print(dijkstra(csgraph=csr_matrix(graph), directed=False))		save_history()
2024-11-15-02-27-44 100 36 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    num_samples = knn_graph.shape[0]	    geodesic_distances = np.zeros((num_samples, num_samples))	    knn_cs_graph = csr_matrix(knn_graph)	    for i in range(num_samples):	        distances_vector = dijkstra(cs_graph=knn_cs_graph, indices=i)	        geodesic_distances[i] = distances_vector	    return geodesic_distances		graph = np.array([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	    ])	print(compute_geodesic_distances(graph))	print(dijkstra(csgraph=csr_matrix(graph), directed=False))		save_history()
2024-11-15-02-27-44 100 37 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    num_samples = knn_graph.shape[0]	    geodesic_distances = np.zeros((num_samples, num_samples))	    knn_cs_graph = csr_matrix(knn_graph)	    for i in range(num_samples):	        distances_vector = dijkstra(cs_graph=knn_cs_graph, indices=i, return_predecessors=False)	        geodesic_distances[i] = distances_vector	    return geodesic_distances		graph = np.array([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	    ])	print(compute_geodesic_distances(graph))	print(dijkstra(csgraph=csr_matrix(graph), directed=False))		save_history()
2024-11-15-02-27-44 100 38 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    num_samples = knn_graph.shape[0]	    geodesic_distances = np.zeros((num_samples, num_samples))	    knn_cs_graph = csr_matrix(knn_graph)	    for i in range(num_samples):	        distances_vector = dijkstra(csgraph=knn_cs_graph, indices=i)	        geodesic_distances[i] = distances_vector	    return geodesic_distances		graph = np.array([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	    ])	print(compute_geodesic_distances(graph))	print(dijkstra(csgraph=csr_matrix(graph), directed=False))		save_history()
2024-11-15-02-27-44 100 39 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    num_samples = knn_graph.shape[0]	    geodesic_distances = np.zeros((num_samples, num_samples))	    knn_cs_graph = csr_matrix(knn_graph)	    for i in range(num_samples):	        distances_vector = dijkstra(csgraph=knn_cs_graph, indices=i, directed=False)	        geodesic_distances[i] = distances_vector	    return geodesic_distances		graph = np.array([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	    ])	print(compute_geodesic_distances(graph))	print(dijkstra(csgraph=csr_matrix(graph), directed=False))		save_history()
2024-11-15-02-27-44 100 40 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    num_samples = knn_graph.shape[0]	    geodesic_distances = np.zeros((num_samples, num_samples))	    knn_cs_graph = csr_matrix(knn_graph)	    for i in range(num_samples):	        distances_vector = dijkstra(csgraph=knn_cs_graph, indices=i)	        geodesic_distances[i] = distances_vector	    return geodesic_distances		graph = np.array([	    [0, 1, 2, 0],	    [0, 0, 0, 1],	    [0, 0, 0, 3],	    [0, 0, 0, 0]	    ])	print(compute_geodesic_distances(graph))	print(dijkstra(csgraph=csr_matrix(graph), directed=False))		save_history()
2024-11-15-02-27-44 100 41 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    num_samples = knn_graph.shape[0]	    geodesic_distances = np.zeros((num_samples, num_samples))	    knn_cs_graph = csr_matrix(knn_graph)	    for i in range(num_samples):	        distances_vector = dijkstra(csgraph=knn_cs_graph, indices=i)	        geodesic_distances[i] = distances_vector	    return geodesic_distances		# graph = np.array([	#     [0, 1, 2, 0],	#     [0, 0, 0, 1],	#     [0, 0, 0, 3],	#     [0, 0, 0, 0]	#     ])	# print(compute_geodesic_distances(graph))	# print(dijkstra(csgraph=csr_matrix(graph), directed=False))		save_history()
2024-11-15-02-27-44 100 42 from sklearn.manifold import MDS		def apply_mds(geodesic_distances: np.ndarray, n_components: int) -> np.ndarray:	    embedding = MDS(n_components=n_components)	    reduced_data = embedding.fit_transform(geodesic_distances)	    return reduced_data		save_history()
2024-11-15-02-27-44 100 43 def isomap(data: np.ndarray, n_components: int, k: int) -> np.ndarray:	    knn_graph = construct_knn_graph(data, k)	    geodesic_distances = compute_geodesic_distances(knn_graph)	    reduced_data = apply_mds(geodesic_distances, n_components)	    return reduced_data		save_history()
2024-11-15-02-27-44 100 44 def isomap(data: np.ndarray, n_components: int, k: int) -> np.ndarray:	    knn_graph = construct_knn_graph(data, k)	    geodesic_distances = compute_geodesic_distances(knn_graph)	    reduced_data = apply_mds(geodesic_distances, n_components)	    return reduced_data		from sklearn.datasets import load_digits	from sklearn.manifold import Isomap	X, _ = load_digits(return_X_y=True)	data = X[:20]	embedding = Isomap(n_components=2)	print(embedding.fit_transform(data))		save_history()
2024-11-15-02-27-44 100 45 def isomap(data: np.ndarray, n_components: int, k: int) -> np.ndarray:	    knn_graph = construct_knn_graph(data, k)	    geodesic_distances = compute_geodesic_distances(knn_graph)	    reduced_data = apply_mds(geodesic_distances, n_components)	    return reduced_data		from sklearn.datasets import load_digits	from sklearn.manifold import Isomap	X, _ = load_digits(return_X_y=True)	data = X[:20]	embedding = Isomap(n_components=2)	print(embedding.fit_transform(data))	print(isomap(data, 2, 2))		save_history()
2024-11-15-02-27-44 100 46 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    num_samples = knn_graph.shape[0]	    geodesic_distances = np.zeros((num_samples, num_samples))	    knn_cs_graph = csr_matrix(knn_graph)	    for i in range(num_samples):	        distances_vector = dijkstra(csgraph=knn_cs_graph, indices=i, directed=False)	        geodesic_distances[i] = distances_vector	    return geodesic_distances		# graph = np.array([	#     [0, 1, 2, 0],	#     [0, 0, 0, 1],	#     [0, 0, 0, 3],	#     [0, 0, 0, 0]	#     ])	# print(compute_geodesic_distances(graph))	# print(dijkstra(csgraph=csr_matrix(graph), directed=False))		save_history()
2024-11-15-02-27-44 100 47 def isomap(data: np.ndarray, n_components: int, k: int) -> np.ndarray:	    knn_graph = construct_knn_graph(data, k)	    geodesic_distances = compute_geodesic_distances(knn_graph)	    reduced_data = apply_mds(geodesic_distances, n_components)	    return reduced_data		from sklearn.datasets import load_digits	from sklearn.manifold import Isomap	X, _ = load_digits(return_X_y=True)	data = X[:20]	embedding = Isomap(n_components=2)	print(embedding.fit_transform(data))	print(isomap(data, 2, 2))		save_history()
2024-11-15-02-27-44 100 48 from scipy.sparse import csr_matrix	from scipy.sparse.csgraph import dijkstra		def compute_geodesic_distances(knn_graph: np.ndarray) -> np.ndarray:	    num_samples = knn_graph.shape[0]	    geodesic_distances = np.zeros((num_samples, num_samples))	    knn_cs_graph = csr_matrix(knn_graph)	    for i in range(num_samples):	        distances_vector = dijkstra(csgraph=knn_cs_graph, indices=i)	        geodesic_distances[i] = distances_vector	    return geodesic_distances		# graph = np.array([	#     [0, 1, 2, 0],	#     [0, 0, 0, 1],	#     [0, 0, 0, 3],	#     [0, 0, 0, 0]	#     ])	# print(compute_geodesic_distances(graph))	# print(dijkstra(csgraph=csr_matrix(graph), directed=False))		save_history()
