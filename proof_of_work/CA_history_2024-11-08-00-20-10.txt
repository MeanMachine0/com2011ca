2024-11-08-00-20-10 84 1 get_ipython().run_line_magic('matplotlib', 'inline')	import matplotlib.pyplot as plt	from typing import Tuple	import numpy as np	import scipy as sp	from submission_utils import save_history, check_and_prepare_for_submission	# import warnings filter	from warnings import simplefilter	# ignore all future warnings	simplefilter(action='ignore', category=FutureWarning)
2024-11-08-00-20-10 84 2 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    sum(num_points)	    data = np.ndarray(shape=(total_num_points))	    return	ape = np.ndarray(shape=(3, ))	ape[0] = 1	ape[1] = 2	ape[2] = 3	print(ape.sum())		    	save_history()
2024-11-08-00-20-10 84 3 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    sum(num_points)	    data = np.ndarray(shape=(total_num_points))	    return	ape = np.ndarray(shape=3)	ape[0] = 1	ape[1] = 2	ape[2] = 3	print(ape.sum())		    	save_history()
2024-11-08-00-20-10 84 4 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    sum(num_points)	    data = np.ndarray(shape=(total_num_points))	    return	ape = np.ndarray(shape=3)	ape[0] = 1	ape[1] = 2	ape[2] = 3	print(ape.sum())		    	save_history()
2024-11-08-00-20-10 84 5 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    sum(num_points)	    data = np.ndarray(shape=(total_num_points))	    return	ape = np.ndarray(shape=(3,))	ape[0] = 1	ape[1] = 2	ape[2] = 3	print(ape.sum())		    	save_history()
2024-11-08-00-20-10 84 6 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    sum(num_points)	    data = np.ndarray(shape=(total_num_points))	    return	ape = np.ndarray(shape=(3,))	ape[0] = 1	ape[1] = 2	ape[2] = 5	print(ape.sum())		    	save_history()
2024-11-08-00-20-10 84 7 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array(shape=(total_num_points, num_dimensions))	    labels = np.array(shape=(total_num_points,))	    for i in range(num_clusters):	        points_in_cluster = num_points[i]	        print(points_in_cluster)	        np.random.normal()	    return		    	save_history()
2024-11-08-00-20-10 84 8 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=0, scale=1, size=1))	    	save_history()
