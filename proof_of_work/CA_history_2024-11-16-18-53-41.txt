2024-11-16-18-53-41 103 1 def within_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    num_samples = data.shape[0]	    within_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        cluster_points_inds = np.argwhere(labels == cluster_ind)	        cluster_points = labels[cluster_points_inds]	        a_of_i_frac = 1 / (len(cluster_points) - 1)	        a_of_i_sum = 0	        for other_data_point in cluster_points:	            if not np.array_equal(data_point, other_data_point):	                a_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	        a_of_i = a_of_i_frac * a_of_i_sum	        within_distances[result_ind] = a_of_i	    return within_distances		# data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	# print(within_cluster_distances(data, labels))		save_history()
2024-11-16-18-53-41 103 2 get_ipython().run_line_magic('matplotlib', 'inline')	import matplotlib.pyplot as plt	from typing import Tuple	import numpy as np	import scipy as sp	from submission_utils import save_history, check_and_prepare_for_submission	# import warnings filter	from warnings import simplefilter	# ignore all future warnings	simplefilter(action='ignore', category=FutureWarning)
2024-11-16-18-53-41 103 3 def within_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    num_samples = data.shape[0]	    within_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        cluster_points_inds = np.argwhere(labels == cluster_ind)	        cluster_points = labels[cluster_points_inds]	        a_of_i_frac = 1 / (len(cluster_points) - 1)	        a_of_i_sum = 0	        for other_data_point in cluster_points:	            if not np.array_equal(data_point, other_data_point):	                a_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	        a_of_i = a_of_i_frac * a_of_i_sum	        within_distances[result_ind] = a_of_i	    return within_distances		# data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	# print(within_cluster_distances(data, labels))		save_history()
2024-11-16-18-53-41 103 4 def within_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    num_samples = data.shape[0]	    within_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        cluster_points_inds = np.argwhere(labels == cluster_ind)	        cluster_points = labels[cluster_points_inds]	        a_of_i_frac = 1 / (len(cluster_points) - 1)	        a_of_i_sum = 0	        for other_data_point in cluster_points:	            if not np.array_equal(data_point, other_data_point):	                a_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	        a_of_i = a_of_i_frac * a_of_i_sum	        within_distances[result_ind] = a_of_i	    return within_distances		data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	print(within_cluster_distances(data, labels))		save_history()
2024-11-16-18-53-41 103 5 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    data = np.array(data)	    labels = np.array(labels)	    return (data, labels)	# data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)		save_history()
2024-11-16-18-53-41 103 6 def within_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    num_samples = data.shape[0]	    within_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        cluster_points_inds = np.argwhere(labels == cluster_ind)	        cluster_points = labels[cluster_points_inds]	        a_of_i_frac = 1 / (len(cluster_points) - 1)	        a_of_i_sum = 0	        for other_data_point in cluster_points:	            if not np.array_equal(data_point, other_data_point):	                a_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	        a_of_i = a_of_i_frac * a_of_i_sum	        within_distances[result_ind] = a_of_i	    return within_distances		data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	print(within_cluster_distances(data, labels))		save_history()
2024-11-16-18-53-41 103 7 def within_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    num_samples = data.shape[0]	    within_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        cluster_points_inds = np.argwhere(labels == cluster_ind)	        cluster_points = labels[cluster_points_inds]	        a_of_i_frac = 1 / (len(cluster_points) - 1)	        a_of_i_sum = 0	        for other_data_point in cluster_points:	            if not np.array_equal(data_point, other_data_point):	                a_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	        a_of_i = a_of_i_frac * a_of_i_sum	        within_distances[result_ind] = a_of_i	    return within_distances		data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	print(within_cluster_distances(data, labels))		save_history()
2024-11-16-18-53-41 103 8 def within_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    num_samples = data.shape[0]	    within_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        cluster_points_inds = np.argwhere(labels == cluster_ind)	        cluster_points = labels[cluster_points_inds]	        a_of_i_frac = 1 / (len(cluster_points) - 1)	        a_of_i_sum = 0	        for other_data_point in cluster_points:	            if not np.array_equal(data_point, other_data_point):	                a_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	        a_of_i = a_of_i_frac * a_of_i_sum	        within_distances[result_ind] = a_of_i	    return within_distances		data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	print(within_cluster_distances(data, labels))		save_history()
2024-11-16-18-53-41 103 9 def within_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    num_samples = data.shape[0]	    within_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        cluster_points_inds = np.argwhere(labels == cluster_ind)	        cluster_points = data[cluster_points_inds]	        a_of_i_frac = 1 / (len(cluster_points) - 1)	        a_of_i_sum = 0	        for other_data_point in cluster_points:	            if not np.array_equal(data_point, other_data_point):	                a_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	        a_of_i = a_of_i_frac * a_of_i_sum	        within_distances[result_ind] = a_of_i	    return within_distances		data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	print(within_cluster_distances(data, labels))		save_history()
2024-11-16-18-53-41 103 10 def within_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    num_samples = data.shape[0]	    within_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        cluster_points_inds = np.argwhere(labels == cluster_ind)	        cluster_points = labels[cluster_points_inds]	        a_of_i_frac = 1 / (len(cluster_points) - 1)	        a_of_i_sum = 0	        for other_data_point in cluster_points:	            if not np.array_equal(data_point, other_data_point):	                a_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	        a_of_i = a_of_i_frac * a_of_i_sum	        within_distances[result_ind] = a_of_i	    return within_distances		data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	print(within_cluster_distances(data, labels))		save_history()
2024-11-16-18-53-41 103 11 def within_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    num_samples = data.shape[0]	    within_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        cluster_points_inds = np.argwhere(labels == cluster_ind)	        cluster_points = labels[cluster_points_inds]	        a_of_i_frac = 1 / (len(cluster_points) - 1)	        a_of_i_sum = 0	        for other_data_point in cluster_points:	            if not np.array_equal(data_point, other_data_point):	                a_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	        a_of_i = a_of_i_frac * a_of_i_sum	        within_distances[result_ind] = a_of_i	    return within_distances		data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	print(within_cluster_distances(data, labels))		save_history()
2024-11-16-18-53-41 103 12 def within_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    num_samples = data.shape[0]	    within_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        cluster_points_inds = np.argwhere(labels == cluster_ind)	        cluster_points = data[cluster_points_inds]	        a_of_i_frac = 1 / (len(cluster_points) - 1)	        a_of_i_sum = 0	        for other_data_point in cluster_points:	            if not np.array_equal(data_point, other_data_point):	                a_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	        a_of_i = a_of_i_frac * a_of_i_sum	        within_distances[result_ind] = a_of_i	    return within_distances		data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	print(within_cluster_distances(data, labels))		save_history()
2024-11-16-18-53-41 103 13 def within_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    num_samples = data.shape[0]	    within_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        cluster_points_inds = np.argwhere(labels == cluster_ind)	        cluster_points = data[cluster_points_inds]	        a_of_i_frac = 1 / (len(cluster_points) - 1)	        a_of_i_sum = 0	        for other_data_point in cluster_points:	            if not np.array_equal(data_point, other_data_point):	                a_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	        a_of_i = a_of_i_frac * a_of_i_sum	        within_distances[result_ind] = a_of_i	    return within_distances		data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	print(within_cluster_distances(data, labels))		save_history()
2024-11-16-18-53-41 103 14 def within_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    num_samples = data.shape[0]	    within_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        cluster_points_inds = np.argwhere(labels == cluster_ind)	        cluster_points = data[cluster_points_inds]	        a_of_i_frac = 1 / (len(cluster_points) - 1)	        a_of_i_sum = 0	        for other_data_point in cluster_points:	            if not np.array_equal(data_point, other_data_point):	                a_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	        a_of_i = a_of_i_frac * a_of_i_sum	        within_distances[result_ind] = a_of_i	    return within_distances		data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	print(within_cluster_distances(data, labels))		save_history()
2024-11-16-18-53-41 103 15 def within_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    num_samples = data.shape[0]	    within_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        cluster_points_inds = np.argwhere(labels == cluster_ind)	        cluster_points = data[cluster_points_inds]	        a_of_i_frac = 1 / (len(cluster_points) - 1)	        a_of_i_sum = 0	        for other_data_point in cluster_points:	            if not np.array_equal(data_point, other_data_point):	                a_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	        a_of_i = a_of_i_frac * a_of_i_sum	        within_distances[result_ind] = a_of_i	    return within_distances		data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	print(within_cluster_distances(data, labels))		save_history()
2024-11-16-18-53-41 103 16 def within_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    num_samples = data.shape[0]	    within_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        cluster_points_inds = np.argwhere(labels == cluster_ind)	        cluster_points = data[cluster_points_inds]	        a_of_i_frac = 1 / (len(cluster_points) - 1)	        a_of_i_sum = 0	        for other_data_point in cluster_points:	            if not np.array_equal(data_point, other_data_point):	                a_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	        a_of_i = a_of_i_frac * a_of_i_sum	        within_distances[result_ind] = a_of_i	    return within_distances		data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	print(within_cluster_distances(data, labels))		save_history()
2024-11-16-18-53-41 103 17 def within_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    num_samples = data.shape[0]	    within_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        cluster_points_inds = np.argwhere(labels == cluster_ind)	        cluster_points = data[cluster_points_inds]	        a_of_i_frac = 1 / (len(cluster_points) - 1)	        a_of_i_sum = 0	        for other_data_point in cluster_points:	            other_data_point.shape = (other_data_point.shape[1],)	            if not np.array_equal(data_point, other_data_point):	                a_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	        a_of_i = a_of_i_frac * a_of_i_sum	        within_distances[result_ind] = a_of_i	    return within_distances		data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	print(within_cluster_distances(data, labels))		save_history()
2024-11-16-18-53-41 103 18 def within_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    num_samples = data.shape[0]	    within_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        cluster_points_inds = np.argwhere(labels == cluster_ind)	        cluster_points = data[cluster_points_inds]	        a_of_i_frac = 1 / (len(cluster_points) - 1)	        a_of_i_sum = 0	        for other_data_point in cluster_points:	            other_data_point.shape = (other_data_point.shape[1],)	            if not np.array_equal(data_point, other_data_point):	                a_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	        a_of_i = a_of_i_frac * a_of_i_sum	        within_distances[result_ind] = a_of_i	    return within_distances		data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	print(within_cluster_distances(data, labels))		save_history()
2024-11-16-18-53-41 103 19 def within_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    num_samples = data.shape[0]	    within_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        cluster_points_inds = np.argwhere(labels == cluster_ind)	        cluster_points = data[cluster_points_inds]	        a_of_i_frac = 1 / (len(cluster_points) - 1)	        a_of_i_sum = 0	        for other_data_point in cluster_points:	            other_data_point.shape = (other_data_point.shape[1],)	            if not np.array_equal(data_point, other_data_point):	                a_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	        a_of_i = a_of_i_frac * a_of_i_sum	        within_distances[result_ind] = a_of_i	    return within_distances		data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	print(within_cluster_distances(data, labels))		save_history()
2024-11-16-18-53-41 103 20 def nearest_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    """	    Computes the nearest-cluster distance b(i) for each data point, which is the minimum average distance	    from each point to all points in any other cluster.		    Parameters:	    - data (np.ndarray): A 2D array of shape (n_samples, n_features), representing the dataset.	    - labels (np.ndarray): A 1D array of shape (n_samples,), where each entry indicates the cluster label for each point.		    Returns:	    - nearest_distances (np.ndarray): A 1D array of shape (n_samples,), where each entry is the nearest-cluster distance b(i) for each point.	    """	    num_samples = data.shape[0]	    nearest_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        nearest_distance = 1e9	        num_clusters = max(labels)	        for other_cluster_ind in [ind for ind in range(num_clusters) if ind != cluster_ind]:	            other_cluster_points_inds = np.argwhere(labels == other_cluster_ind)	            other_cluster_points = data[other_cluster_points_inds]	            b_of_i_frac = 1 / len(other_cluster_points_inds)	            b_of_i_sum = 0	            for other_data_point in other_cluster_points:	                other_data_point.shape = (other_data_point.shape[1],)	                b_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	            b_of_i = b_of_i_frac * b_of_i_sum	            if b_of_i < nearest_distance:	                nearest_distance = b_of_i	        nearest_distances[result_ind] = nearest_distance	    return nearest_distances		data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	print(nearest_cluster_distances(data, labels))		save_history()
2024-11-16-18-53-41 103 21 def nearest_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    """	    Computes the nearest-cluster distance b(i) for each data point, which is the minimum average distance	    from each point to all points in any other cluster.		    Parameters:	    - data (np.ndarray): A 2D array of shape (n_samples, n_features), representing the dataset.	    - labels (np.ndarray): A 1D array of shape (n_samples,), where each entry indicates the cluster label for each point.		    Returns:	    - nearest_distances (np.ndarray): A 1D array of shape (n_samples,), where each entry is the nearest-cluster distance b(i) for each point.	    """	    num_samples = data.shape[0]	    nearest_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        nearest_distance = 1e9	        num_clusters = max(labels)	        for other_cluster_ind in [ind for ind in range(num_clusters) if ind != cluster_ind]:	            other_cluster_points_inds = np.argwhere(labels == other_cluster_ind)	            other_cluster_points = data[other_cluster_points_inds]	            b_of_i_frac = 1 / len(other_cluster_points_inds)	            b_of_i_sum = 0	            for other_data_point in other_cluster_points:	                other_data_point.shape = (other_data_point.shape[1],)	                b_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	            b_of_i = b_of_i_frac * b_of_i_sum	            if b_of_i < nearest_distance:	                nearest_distance = b_of_i	        nearest_distances[result_ind] = nearest_distance	    return nearest_distances		data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	print(nearest_cluster_distances(data, labels))		save_history()
2024-11-16-18-53-41 103 22 def nearest_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    """	    Computes the nearest-cluster distance b(i) for each data point, which is the minimum average distance	    from each point to all points in any other cluster.		    Parameters:	    - data (np.ndarray): A 2D array of shape (n_samples, n_features), representing the dataset.	    - labels (np.ndarray): A 1D array of shape (n_samples,), where each entry indicates the cluster label for each point.		    Returns:	    - nearest_distances (np.ndarray): A 1D array of shape (n_samples,), where each entry is the nearest-cluster distance b(i) for each point.	    """	    num_samples = data.shape[0]	    nearest_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        nearest_distance = 1e9	        num_clusters = max(labels)	        for other_cluster_ind in [ind for ind in range(num_clusters) if ind != cluster_ind]:	            other_cluster_points_inds = np.argwhere(labels == other_cluster_ind)	            other_cluster_points = data[other_cluster_points_inds]	            b_of_i_frac = 1 / len(other_cluster_points_inds)	            b_of_i_sum = 0	            for other_data_point in other_cluster_points:	                other_data_point.shape = (other_data_point.shape[1],)	                b_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	            b_of_i = b_of_i_frac * b_of_i_sum	            if b_of_i < nearest_distance:	                nearest_distance = b_of_i	        nearest_distances[result_ind] = nearest_distance	    return nearest_distances		data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	print(nearest_cluster_distances(data, labels))		save_history()
2024-11-16-18-53-41 103 23 def nearest_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    """	    Computes the nearest-cluster distance b(i) for each data point, which is the minimum average distance	    from each point to all points in any other cluster.		    Parameters:	    - data (np.ndarray): A 2D array of shape (n_samples, n_features), representing the dataset.	    - labels (np.ndarray): A 1D array of shape (n_samples,), where each entry indicates the cluster label for each point.		    Returns:	    - nearest_distances (np.ndarray): A 1D array of shape (n_samples,), where each entry is the nearest-cluster distance b(i) for each point.	    """	    num_samples = data.shape[0]	    nearest_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        nearest_distance = 1e9	        num_clusters = max(labels)	        for other_cluster_ind in [ind for ind in range(num_clusters) if ind != cluster_ind]:	            other_cluster_points_inds = np.argwhere(labels == other_cluster_ind)	            other_cluster_points = data[other_cluster_points_inds]	            b_of_i_frac = 1 / len(other_cluster_points_inds)	            b_of_i_sum = 0	            for other_data_point in other_cluster_points:	                other_data_point.shape = (other_data_point.shape[1],)	                b_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	            b_of_i = b_of_i_frac * b_of_i_sum	            if b_of_i < nearest_distance:	                nearest_distance = b_of_i	        nearest_distances[result_ind] = nearest_distance	    return nearest_distances		data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	print(nearest_cluster_distances(data, labels))		save_history()
2024-11-16-18-53-41 103 24 def nearest_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    """	    Computes the nearest-cluster distance b(i) for each data point, which is the minimum average distance	    from each point to all points in any other cluster.		    Parameters:	    - data (np.ndarray): A 2D array of shape (n_samples, n_features), representing the dataset.	    - labels (np.ndarray): A 1D array of shape (n_samples,), where each entry indicates the cluster label for each point.		    Returns:	    - nearest_distances (np.ndarray): A 1D array of shape (n_samples,), where each entry is the nearest-cluster distance b(i) for each point.	    """	    num_samples = data.shape[0]	    nearest_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        nearest_distance = 1e9	        num_clusters = max(labels)	        for other_cluster_ind in [ind for ind in range(num_clusters) if ind != cluster_ind]:	            other_cluster_points_inds = np.argwhere(labels == other_cluster_ind)	            other_cluster_points = data[other_cluster_points_inds]	            b_of_i_frac = 1 / len(other_cluster_points_inds)	            b_of_i_sum = 0	            for other_data_point in other_cluster_points:	                other_data_point.shape = (other_data_point.shape[1],)	                b_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	            b_of_i = b_of_i_frac * b_of_i_sum	            if b_of_i < nearest_distance:	                nearest_distance = b_of_i	        nearest_distances[result_ind] = nearest_distance	    return nearest_distances		data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	print(nearest_cluster_distances(data, labels))		save_history()
2024-11-16-18-53-41 103 25 def nearest_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    """	    Computes the nearest-cluster distance b(i) for each data point, which is the minimum average distance	    from each point to all points in any other cluster.		    Parameters:	    - data (np.ndarray): A 2D array of shape (n_samples, n_features), representing the dataset.	    - labels (np.ndarray): A 1D array of shape (n_samples,), where each entry indicates the cluster label for each point.		    Returns:	    - nearest_distances (np.ndarray): A 1D array of shape (n_samples,), where each entry is the nearest-cluster distance b(i) for each point.	    """	    num_samples = data.shape[0]	    nearest_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        nearest_distance = 1e9	        num_clusters = max(labels)	        for other_cluster_ind in [ind for ind in range(num_clusters) if ind != cluster_ind]:	            other_cluster_points_inds = np.argwhere(labels == other_cluster_ind)	            other_cluster_points = data[other_cluster_points_inds]	            b_of_i_frac = 1 / len(other_cluster_points_inds)	            b_of_i_sum = 0	            for other_data_point in other_cluster_points:	                other_data_point.shape = (other_data_point.shape[1],)	                b_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	            b_of_i = b_of_i_frac * b_of_i_sum	            if b_of_i < nearest_distance:	                nearest_distance = b_of_i	        nearest_distances[result_ind] = nearest_distance	    return nearest_distances		data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	print(nearest_cluster_distances(data, labels))		save_history()
2024-11-16-18-53-41 103 26 def nearest_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    """	    Computes the nearest-cluster distance b(i) for each data point, which is the minimum average distance	    from each point to all points in any other cluster.		    Parameters:	    - data (np.ndarray): A 2D array of shape (n_samples, n_features), representing the dataset.	    - labels (np.ndarray): A 1D array of shape (n_samples,), where each entry indicates the cluster label for each point.		    Returns:	    - nearest_distances (np.ndarray): A 1D array of shape (n_samples,), where each entry is the nearest-cluster distance b(i) for each point.	    """	    num_samples = data.shape[0]	    nearest_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        nearest_distance = 1e9	        num_clusters = max(labels)	        for other_cluster_ind in [ind for ind in range(num_clusters) if ind != cluster_ind]:	            other_cluster_points_inds = np.argwhere(labels == other_cluster_ind)	            other_cluster_points = data[other_cluster_points_inds]	            b_of_i_frac = 1 / len(other_cluster_points_inds)	            b_of_i_sum = 0	            for other_data_point in other_cluster_points:	                other_data_point.shape = (other_data_point.shape[1],)	                b_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	            b_of_i = b_of_i_frac * b_of_i_sum	            if b_of_i < nearest_distance:	                nearest_distance = b_of_i	        nearest_distances[result_ind] = nearest_distance	    return nearest_distances		data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	print(nearest_cluster_distances(data, labels))		save_history()
2024-11-16-18-53-41 103 27 def nearest_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    """	    Computes the nearest-cluster distance b(i) for each data point, which is the minimum average distance	    from each point to all points in any other cluster.		    Parameters:	    - data (np.ndarray): A 2D array of shape (n_samples, n_features), representing the dataset.	    - labels (np.ndarray): A 1D array of shape (n_samples,), where each entry indicates the cluster label for each point.		    Returns:	    - nearest_distances (np.ndarray): A 1D array of shape (n_samples,), where each entry is the nearest-cluster distance b(i) for each point.	    """	    num_samples = data.shape[0]	    nearest_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        nearest_distance = 1e9	        num_clusters = max(labels)	        for other_cluster_ind in [ind for ind in range(num_clusters) if ind != cluster_ind]:	            other_cluster_points_inds = np.argwhere(labels == other_cluster_ind)	            other_cluster_points = data[other_cluster_points_inds]	            b_of_i_frac = 1 / len(other_cluster_points_inds)	            b_of_i_sum = 0	            for other_data_point in other_cluster_points:	                other_data_point.shape = (other_data_point.shape[1],)	                b_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	            b_of_i = b_of_i_frac * b_of_i_sum	            if b_of_i < nearest_distance:	                nearest_distance = b_of_i	        nearest_distances[result_ind] = nearest_distance	    return nearest_distances		# data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	# print(nearest_cluster_distances(data, labels))		save_history()
2024-11-16-18-53-41 103 28 def within_cluster_distances(data: np.ndarray, labels: np.ndarray) -> np.ndarray:	    num_samples = data.shape[0]	    within_distances = np.zeros((num_samples,))	    for result_ind, (data_point, cluster_ind) in enumerate(zip(data, labels)):	        cluster_points_inds = np.argwhere(labels == cluster_ind)	        cluster_points = data[cluster_points_inds]	        a_of_i_frac = 1 / (len(cluster_points) - 1)	        a_of_i_sum = 0	        for other_data_point in cluster_points:	            other_data_point.shape = (other_data_point.shape[1],)	            if not np.array_equal(data_point, other_data_point):	                a_of_i_sum += (sum((i - j) ** 2 for i, j in zip(data_point, other_data_point))) ** 0.5	        a_of_i = a_of_i_frac * a_of_i_sum	        within_distances[result_ind] = a_of_i	    return within_distances		# data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	# print(within_cluster_distances(data, labels))		save_history()
2024-11-16-18-53-41 103 29 def silhouette_score(data: np.ndarray, labels: np.ndarray) -> Tuple[np.ndarray, float]:	    num_samples = len(labels)	    scores = np.zeros(num_samples)	    a_of_is = within_cluster_distances(data, labels)	    b_of_is = nearest_cluster_distances(data, labels)	    for i in range(num_samples):	        a_of_i = a_of_is[i]	        b_of_i = b_of_is[i]	        score = (b_of_i - a_of_i) / max(a_of_i, b_of_i)	        scores[i] = score	    mean_score = np.mean(scores)	    return scores, mean_score		data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	print(silhouette_score(data, labels))		save_history()
2024-11-16-18-53-41 103 30 def silhouette_score(data: np.ndarray, labels: np.ndarray) -> Tuple[np.ndarray, float]:	    num_samples = len(labels)	    scores = np.zeros(num_samples)	    a_of_is = within_cluster_distances(data, labels)	    b_of_is = nearest_cluster_distances(data, labels)	    for i in range(num_samples):	        a_of_i = a_of_is[i]	        b_of_i = b_of_is[i]	        score = (b_of_i - a_of_i) / max(a_of_i, b_of_i)	        scores[i] = score	    mean_score = np.mean(scores)	    return scores, mean_score		data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 1, 1, 1]), 10)	print(silhouette_score(data, labels))		save_history()
2024-11-16-18-53-41 103 31 def silhouette_score(data: np.ndarray, labels: np.ndarray) -> Tuple[np.ndarray, float]:	    num_samples = len(labels)	    scores = np.zeros(num_samples)	    a_of_is = within_cluster_distances(data, labels)	    b_of_is = nearest_cluster_distances(data, labels)	    for i in range(num_samples):	        a_of_i = a_of_is[i]	        b_of_i = b_of_is[i]	        score = (b_of_i - a_of_i) / max(a_of_i, b_of_i)	        scores[i] = score	    mean_score = np.mean(scores)	    return scores, mean_score		data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 1, 1, 1]), 10)	print(silhouette_score(data, labels))		save_history()
2024-11-16-18-53-41 103 32 def silhouette_score(data: np.ndarray, labels: np.ndarray) -> Tuple[np.ndarray, float]:	    num_samples = len(labels)	    scores = np.zeros(num_samples)	    a_of_is = within_cluster_distances(data, labels)	    b_of_is = nearest_cluster_distances(data, labels)	    for i in range(num_samples):	        a_of_i = a_of_is[i]	        b_of_i = b_of_is[i]	        score = (b_of_i - a_of_i) / max(a_of_i, b_of_i)	        scores[i] = score	    mean_score = np.mean(scores)	    return scores, mean_score		data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([10, 10, 10, 10]), 10)	print(silhouette_score(data, labels))		save_history()
2024-11-16-18-53-41 103 33 def silhouette_score(data: np.ndarray, labels: np.ndarray) -> Tuple[np.ndarray, float]:	    num_samples = len(labels)	    scores = np.zeros(num_samples)	    a_of_is = within_cluster_distances(data, labels)	    b_of_is = nearest_cluster_distances(data, labels)	    for i in range(num_samples):	        a_of_i = a_of_is[i]	        b_of_i = b_of_is[i]	        score = (b_of_i - a_of_i) / max(a_of_i, b_of_i)	        scores[i] = score	    mean_score = np.mean(scores)	    return scores, mean_score		data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 1, 1, 1]), 10)	print(silhouette_score(data, labels))		save_history()
2024-11-16-18-53-41 103 34 def silhouette_score(data: np.ndarray, labels: np.ndarray) -> Tuple[np.ndarray, float]:	    num_samples = len(labels)	    scores = np.zeros(num_samples)	    a_of_is = within_cluster_distances(data, labels)	    b_of_is = nearest_cluster_distances(data, labels)	    for i in range(num_samples):	        a_of_i = a_of_is[i]	        b_of_i = b_of_is[i]	        score = (b_of_i - a_of_i) / max(a_of_i, b_of_i)	        scores[i] = score	    mean_score = np.mean(scores)	    return scores, mean_score		# data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 1, 1, 1]), 10)	# print(silhouette_score(data, labels))		save_history()
2024-11-16-18-53-41 103 35 import numpy as np	import matplotlib.pyplot as plt		# Step 1: Generate 5-dimensional data with overlapping clusters	# We create 3 clusters with significant overlap	np.random.seed(42)	num_clusters = 3	num_dimensions = 5	num_points = np.array([100, 100, 100])	cluster_std_devs = np.array([1.5, 2.5, 2.5])  # High std dev for overlap	center_std_dev = 5.0  # Spread out the cluster centers more		# Generate the dataset	data, labels = create_dataset(num_clusters, num_dimensions, num_points, cluster_std_devs, center_std_dev)		# Step 2: Introduce missing values into the dataset (10% of the data)	nan_data = data.copy()	num_elements = nan_data.size	num_nan = int(0.1 * num_elements)  # 10% of the data	nan_indices = np.random.choice(num_elements, num_nan, replace=False)	nan_data.ravel()[nan_indices] = np.nan		# Step 3: Impute missing values using low-rank SVD with rank 4	imputed_data = impute_missing_values(nan_data, rank=4)		# Step 4: Apply ISOMAP to reduce to 2D for visualization	n_components = 2	data_2d = isomap(imputed_data, n_components=n_components, k=5)		# Step 5: Apply kmeans clustering and calculate silhouette scores for each cluster count	n_clusters_range = range(2, 9)	silhouette_scores = []		for n_clusters in n_clusters_range:	    # Apply kmeans clustering to the reduced data	    centroids, cluster_labels = kmeans(data_2d, k=n_clusters, max_iter=100, tol=1e-4)	    	    # Calculate the silhouette score for the current number of clusters	    _, mean_silhouette_score = silhouette_score(data_2d, cluster_labels)	    silhouette_scores.append(mean_silhouette_score)		# Step 6: Identify the best number of clusters based on silhouette score	best_n_clusters = n_clusters_range[np.argmax(silhouette_scores)]	best_silhouette_score = max(silhouette_scores)		# Print the results	print(f"Best number of clusters: {best_n_clusters}")	print(f"Best silhouette score: {best_silhouette_score:.3f}")		# Plot silhouette scores vs. number of clusters	plt.figure(figsize=(10, 6))	plt.plot(n_clusters_range, silhouette_scores, marker='o')	plt.title("Silhouette Scores for Different Numbers of Clusters")	plt.xlabel("Number of Clusters")	plt.ylabel("Mean Silhouette Score")	plt.show()
2024-11-16-18-53-41 103 36 get_ipython().run_line_magic('matplotlib', 'inline')	import matplotlib.pyplot as plt	from typing import Tuple	import numpy as np	import scipy as sp	from submission_utils import save_history, check_and_prepare_for_submission	# import warnings filter	from warnings import simplefilter	# ignore all future warnings	simplefilter(action='ignore', category=FutureWarning)
2024-11-16-18-53-41 103 37 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    data = np.array(data)	    labels = np.array(labels)	    return (data, labels)	# data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)		save_history()
2024-11-16-18-53-41 103 38 # This cell is reserved for the unit tests. Do not consider this cell. 
2024-11-16-18-53-41 103 39 # This cell is reserved for the unit tests. Do not consider this cell. 
