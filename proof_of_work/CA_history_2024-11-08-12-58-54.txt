2024-11-08-12-58-54 87 1 from sklearn.decomposition import PCA	from sklearn.datasets import load_iris		def pca_with_svd(data: np.ndarray, n_components: int) -> np.ndarray:	    centred_data = data - np.mean(data, axis=0)	    u, s, vh = np.linalg.svd(centred_data)	    print(s)	    transformed_data = centred_data.dot(vh.T[:, :n_components])	    return transformed_data		df = load_iris()	X = df.data	pca = PCA(n_components=2)	X_proj = pca.fit_transform(X)	print(X_proj)	Y = df.data	print(pca_with_svd(Y, 2))	save_history()
2024-11-08-12-58-54 87 2 get_ipython().run_line_magic('matplotlib', 'inline')	import matplotlib.pyplot as plt	from typing import Tuple	import numpy as np	import scipy as sp	from submission_utils import save_history, check_and_prepare_for_submission	# import warnings filter	from warnings import simplefilter	# ignore all future warnings	simplefilter(action='ignore', category=FutureWarning)
2024-11-08-12-58-54 87 3 from sklearn.decomposition import PCA	from sklearn.datasets import load_iris		def pca_with_svd(data: np.ndarray, n_components: int) -> np.ndarray:	    centred_data = data - np.mean(data, axis=0)	    u, s, vh = np.linalg.svd(centred_data)	    print(s)	    transformed_data = centred_data.dot(vh.T[:, :n_components])	    return transformed_data		df = load_iris()	X = df.data	pca = PCA(n_components=2)	X_proj = pca.fit_transform(X)	print(X_proj)	Y = df.data	print(pca_with_svd(Y, 2))	save_history()
2024-11-08-12-58-54 87 4 from sklearn.decomposition import PCA	from sklearn.datasets import load_iris		def pca_with_svd(data: np.ndarray, n_components: int) -> np.ndarray:	    centred_data = data - np.mean(data, axis=0)	    u, s, vh = np.linalg.svd(centred_data)	    print(s)	    transformed_data = centred_data.dot(vh.T[:, :n_components])	    return transformed_data		df = load_iris()	# X = df.data	# pca = PCA(n_components=2)	# X_proj = pca.fit_transform(X)	# print(X_proj)	Y = df.data	pca_with_svd(Y, 2)	save_history()
2024-11-08-12-58-54 87 5 # from sklearn.decomposition import PCA	# from sklearn.datasets import load_iris		def pca_with_svd(data: np.ndarray, n_components: int) -> np.ndarray:	    centred_data = data - np.mean(data, axis=0)	    u, s, vh = np.linalg.svd(centred_data)	    transformed_data = centred_data.dot(vh.T[:, :n_components])	    return transformed_data		# df = load_iris()	# X = df.data	# pca = PCA(n_components=2)	# X_proj = pca.fit_transform(X)	# print(X_proj)	# Y = df.data	# print(pca_with_svd(Y, 2))	save_history()
2024-11-08-12-58-54 87 6 from sklearn.decomposition import PCA	from sklearn.datasets import load_iris		def pca_with_svd(data: np.ndarray, n_components: int) -> np.ndarray:	    centred_data = data - np.mean(data, axis=0)	    u, s, vh = np.linalg.svd(centred_data)	    print(np.diag(s))	    transformed_data = centred_data.dot(vh.T[:, :n_components])	    return transformed_data		df = load_iris()	# X = df.data	# pca = PCA(n_components=2)	# X_proj = pca.fit_transform(X)	# print(X_proj)	Y = df.data	pca_with_svd(Y, 2)	save_history()
