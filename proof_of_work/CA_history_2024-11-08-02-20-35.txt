2024-11-08-02-20-35 84 1 get_ipython().run_line_magic('matplotlib', 'inline')	import matplotlib.pyplot as plt	from typing import Tuple	import numpy as np	import scipy as sp	from submission_utils import save_history, check_and_prepare_for_submission	# import warnings filter	from warnings import simplefilter	# ignore all future warnings	simplefilter(action='ignore', category=FutureWarning)
2024-11-08-02-20-35 84 2 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    sum(num_points)	    data = np.ndarray(shape=(total_num_points))	    return	ape = np.ndarray(shape=(3, ))	ape[0] = 1	ape[1] = 2	ape[2] = 3	print(ape.sum())		    	save_history()
2024-11-08-02-20-35 84 3 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    sum(num_points)	    data = np.ndarray(shape=(total_num_points))	    return	ape = np.ndarray(shape=3)	ape[0] = 1	ape[1] = 2	ape[2] = 3	print(ape.sum())		    	save_history()
2024-11-08-02-20-35 84 4 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    sum(num_points)	    data = np.ndarray(shape=(total_num_points))	    return	ape = np.ndarray(shape=3)	ape[0] = 1	ape[1] = 2	ape[2] = 3	print(ape.sum())		    	save_history()
2024-11-08-02-20-35 84 5 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    sum(num_points)	    data = np.ndarray(shape=(total_num_points))	    return	ape = np.ndarray(shape=(3,))	ape[0] = 1	ape[1] = 2	ape[2] = 3	print(ape.sum())		    	save_history()
2024-11-08-02-20-35 84 6 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    sum(num_points)	    data = np.ndarray(shape=(total_num_points))	    return	ape = np.ndarray(shape=(3,))	ape[0] = 1	ape[1] = 2	ape[2] = 5	print(ape.sum())		    	save_history()
2024-11-08-02-20-35 84 7 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array(shape=(total_num_points, num_dimensions))	    labels = np.array(shape=(total_num_points,))	    for i in range(num_clusters):	        points_in_cluster = num_points[i]	        print(points_in_cluster)	        np.random.normal()	    return		    	save_history()
2024-11-08-02-20-35 84 8 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=0, scale=1, size=1))	    	save_history()
2024-11-08-02-20-35 84 9 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=0, scale=1, size=1)[0])	    	save_history()
2024-11-08-02-20-35 84 10 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=0, scale=1, size=1)[0])	    	save_history()
2024-11-08-02-20-35 84 11 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=0, scale=1, size=1)[0])	    	save_history()
2024-11-08-02-20-35 84 12 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=0, scale=1, size=1)[0])	    	save_history()
2024-11-08-02-20-35 84 13 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=0, scale=1, size=1)[0])	    	save_history()
2024-11-08-02-20-35 84 14 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=0, scale=1, size=1)[0])	    	save_history()
2024-11-08-02-20-35 84 15 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=0, scale=1, size=1)[0])	    	save_history()
2024-11-08-02-20-35 84 16 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=0, scale=1, size=1)[0])	    	save_history()
2024-11-08-02-20-35 84 17 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=(0, 3, -2), scale=1, size=(1000, 3)))	save_history()
2024-11-08-02-20-35 84 18 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=(0, 3, -2), scale=1, size=(10, 3)))	save_history()
2024-11-08-02-20-35 84 19 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=(0, 3, -2), scale=1, size=(20, 3)))	save_history()
2024-11-08-02-20-35 84 20 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=(0, 3, -2), scale=1, size=(20, 3)))	save_history()
2024-11-08-02-20-35 84 21 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=(0, 3, -2), scale=1, size=(20, 3)))	save_history()
2024-11-08-02-20-35 84 22 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=(0, 3, -2), scale=1, size=(20, 3)))	save_history()
2024-11-08-02-20-35 84 23 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.random.normal(loc=(0, 3, -2), scale=1, size=(20, 3)))	save_history()
2024-11-08-02-20-35 84 24 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	d = np.random.normal(loc=(0, 3, -2), scale=1, size=(100000, 3))	print(12 ** (1/2))	save_history()
2024-11-08-02-20-35 84 25 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	d = np.random.normal(loc=(0, 3, -2), scale=1, size=(100000, 3))	print(16 ** (1/2))	save_history()
2024-11-08-02-20-35 84 26 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2), scale=1, size=(100000, 3))	dists = [((point[0] ** 2) + (3 - point[1]) ** 2 + (-2 - point[2])) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-02-20-35 84 27 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2), scale=1, size=(100000, 3))	dists = [((point[0] ** 2) + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-02-20-35 84 28 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2), scale=1, size=(100000, 3))	dists = [((point[0] ** 2) + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-02-20-35 84 29 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2), scale=1, size=(100000, 3))	dists = [((point[0] ** 2) + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-02-20-35 84 30 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2), scale=1, size=(100000, 3))	dists = [((point[0] ** 2) + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-02-20-35 84 31 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2), scale=1, size=(100, 3))	dists = [((point[0] ** 2) + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-02-20-35 84 32 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2), scale=1, size=(100, 3))	dists = [((point[0] ** 2) + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-02-20-35 84 33 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2), scale=1, size=(100, 3))	dists = [((point[0] ** 2) + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-02-20-35 84 34 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2), scale=1, size=(100, 3))	dists = [((point[0] ** 2) + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-02-20-35 84 35 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2), scale=1, size=(100, 3))	dists = [((point[0] ** 2) + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-02-20-35 84 36 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2), scale=1, size=(100, 3))	dists = [((point[0] ** 2) + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	print(points)	save_history()
2024-11-08-02-20-35 84 37 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2), scale=1, size=(100000, 3))	dists = [((point[0] ** 2) + ((3 - point[1]) ** 2) + ((-2 - point[2]) ** 2)) ** (1 / 2) for point in points]	save_history()
2024-11-08-02-20-35 84 38 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2), scale=1, size=(100000, 3))	dists = [((point[0] ** 2) + ((3 - point[1]) ** 2) + ((-2 - point[2]) ** 2)) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-02-20-35 84 39 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2), scale=1, size=(100000, 3))	dists = [((point[0] ** 2) + ((3 - point[1]) ** 2) + ((-2 - point[2]) ** 2)) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-02-20-35 84 40 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2), scale=1, size=(100000, 16))	dists = [((point[0] ** 2) + ((3 - point[1]) ** 2) + ((-2 - point[2]) ** 2)) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-02-20-35 84 41 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2, 0), scale=1, size=(100000, 4))	dists = [(point[0] ** 2 + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2 + point[3] ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-02-20-35 84 42 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2, 0), scale=1, size=(100000, 4))	dists = [(point[0] ** 2 + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2 + point[3] ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-02-20-35 84 43 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2, 0), scale=1, size=(100000, 4))	dists = [(point[0] ** 2 + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2 + point[3] ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-02-20-35 84 44 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2, 0), scale=1, size=(100000, 4))	dists = [(point[0] ** 2 + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2 + point[3] ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-02-20-35 84 45 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2, 0), scale=1, size=(100000, 4))	dists = [(point[0] ** 2 + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2 + point[3] ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-02-20-35 84 46 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        cluster_distance_origin = np.random.normal(loc=0, scale=center_std_dev, size=1)[0]	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	points = np.random.normal(loc=(0, 3, -2, 0), scale=3, size=(100000, 4))	dists = [(point[0] ** 2 + (3 - point[1]) ** 2 + (-2 - point[2]) ** 2 + point[3] ** 2) ** (1 / 2) for point in points]	print(sum(dists)/len(dists))	save_history()
2024-11-08-02-20-35 84 47 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        origin = (0 for i in range(num_dimensions))	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print((0 for i in range(6)))	save_history()
2024-11-08-02-20-35 84 48 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    for i in range(num_clusters):	        origin = (0 for i in range(num_dimensions))	        cluster_centre = np.array(np.random.normal())	        points_in_cluster = num_points[i]	        for j in range(points_in_cluster):	            for k in range(num_dimensions):	                print("ape")	    return	print(np.zeros((3,)))	save_history()
2024-11-08-02-20-35 84 49 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    data.shape = (total_num_points, num_dimensions)	    labels = np.array()	    labels.shape = (total_num_points,)	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=num_clusters)	    for i in range(num_clusters):	        cluster_centre = cluster_centres[i]	        cluster_points = np.random.normal(loc=cluster_centre, scale=cluster_std_devs[i])	        data[i] = cluster_points	        labels[i] = i	    return	print(create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10))	save_history()
2024-11-08-02-20-35 84 50 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.array()	    labels = np.array()	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=num_clusters)	    for i in range(num_clusters):	        cluster_centre = cluster_centres[i]	        cluster_points = np.random.normal(loc=cluster_centre, scale=cluster_std_devs[i])	        data[i] = cluster_points	        labels[i] = i	    return	print(create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10))	save_history()
2024-11-08-02-20-35 84 51 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.empty((total_num_points, num_dimensions))	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=num_clusters)	    for i in range(num_clusters):	        cluster_centre = cluster_centres[i]	        cluster_points = np.random.normal(loc=cluster_centre, scale=cluster_std_devs[i])	        data[i] = cluster_points	        labels[i] = i	    return	print(create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10))	save_history()
2024-11-08-02-20-35 84 52 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.empty((total_num_points, num_dimensions))	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=num_clusters)	    for i in range(num_clusters):	        cluster_centre = cluster_centres[i]	        cluster_points = np.random.normal(loc=cluster_centre, scale=cluster_std_devs[i], size=num_points[i])	        data[i] = cluster_points	        labels[i] = i	    return	print(create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10))	save_history()
2024-11-08-02-20-35 84 53 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    # get total num points:	    total_num_points = num_points.sum()	    data = np.empty((total_num_points, num_dimensions))	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=num_clusters)	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=num_points[i])	        data[i] = cluster_points	        labels[i] = i	    return	print(create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10))	save_history()
2024-11-08-02-20-35 84 54 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = np.empty((total_num_points, num_dimensions))	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=num_clusters)	    print(cluster_centres)	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=num_points[i])	        data[i] = cluster_points	        labels[i] = i	    return	print(create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10))	save_history()
2024-11-08-02-20-35 84 55 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = np.empty((total_num_points, num_dimensions))	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        data[i] = cluster_points	        labels[i] = i	    return	print(create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10))	save_history()
2024-11-08-02-20-35 84 56 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = np.empty((total_num_points, num_dimensions))	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    print(cluster_centres)	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        data[i] = cluster_points	        labels[i] = i	    return	print(create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10))	save_history()
2024-11-08-02-20-35 84 57 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = np.empty((total_num_points, num_dimensions))	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    print(cluster_centres)	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        data[i] = cluster_points	        labels[i] = i	    return	print(create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 1))	save_history()
2024-11-08-02-20-35 84 58 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = np.empty((total_num_points, num_dimensions))	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        print(cluster_points)	        data[i] = cluster_points	        labels[i] = i	    return	print(create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10))	save_history()
2024-11-08-02-20-35 84 59 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = np.empty((total_num_points, num_dimensions))	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        print(cluster_points)	        data[i] = cluster_points	        labels[i] = i	    return	print(create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10))	save_history()
2024-11-08-02-20-35 84 60 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = np.empty((total_num_points, num_dimensions))	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        print(cluster_points)	        print(cluster_points[0])	        data[i] = cluster_points	        labels[i] = i	    return	print(create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10))	save_history()
2024-11-08-02-20-35 84 61 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = []	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        labels[i] = i	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	    return (np.array(data), labels)	print(create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10))	save_history()
2024-11-08-02-20-35 84 62 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = []	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        labels[i] = i	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	    return (np.array(data), labels)	print(create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10)[0])	save_history()
2024-11-08-02-20-35 84 63 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = []	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        labels[i] = i	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	    return (np.array(data), labels)	print(create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10)[0])	save_history()
2024-11-08-02-20-35 84 64 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = []	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        labels[i] = i	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	    return (np.array(data), labels)	d = create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10)[0]	save_history()
2024-11-08-02-20-35 84 65 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = []	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        labels[i] = i	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	    return (np.array(data), labels)	result = create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10)	print(result[1])	save_history()
2024-11-08-02-20-35 84 66 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = []	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        labels[i] = i	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	    return (np.array(data), labels)	result = create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10)	print(result[1])	save_history()
2024-11-08-02-20-35 84 67 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = []	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        labels[i] = i	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	    return (np.array(data), labels)	result = create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10)	print(result[1])	save_history()
2024-11-08-02-20-35 84 68 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = []	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        labels[i] = i	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	    return (np.array(data), labels)	result = create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10)	print(result[2])	save_history()
2024-11-08-02-20-35 84 69 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = []	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        labels[i] = i	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	    return (np.array(data), labels)	result = create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10)	print(result[1])	save_history()
2024-11-08-02-20-35 84 70 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = []	    labels = np.empty((total_num_points,))	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        labels[i] = i	        print(labels)	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	    return (np.array(data), labels)	result = create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10)	print(result[1])	save_history()
2024-11-08-02-20-35 84 71 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    return (np.array(data), labels)	result = create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10)	print(result[1])	save_history()
2024-11-08-02-20-35 84 72 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    return (np.array(data), np.array(labels))	result = create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10)	print(result[1])	save_history()
2024-11-08-02-20-35 84 73 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    return (np.array(data), np.array(labels, shape=(3, -1)))	result = create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10)	print(result[1])	save_history()
2024-11-08-02-20-35 84 74 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    return (np.array(data), np.ndarray(labels, shape=(3, -1)))	result = create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10)	print(result[1])	save_history()
2024-11-08-02-20-35 84 75 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    labels = np.array(labels)	    labels.shape = (3, -1)	    return (np.array(data), labels)	result = create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10)	print(result[1])	save_history()
2024-11-08-02-20-35 84 76 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    labels = np.array(labels)	    print(labels.shape)	    return (np.array(data), labels)	result = create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10)	print(result[1])	save_history()
2024-11-08-02-20-35 84 77 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    labels = np.array(labels)	    labels.shape = (total_num_points,)	    return (np.array(data), labels)	result = create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10)	print(result[1])	save_history()
2024-11-08-02-20-35 84 78 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    labels = np.array(labels)	    labels.shape = (total_num_points,)	    print(labels.shape)	    return (np.array(data), labels)	result = create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10)	print(result[1])	save_history()
2024-11-08-02-20-35 84 79 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    labels = np.array(labels)	    print(labels.shape)	    return (np.array(data), labels)	result = create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10)	print(result[1])	save_history()
2024-11-08-02-20-35 84 80 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    return (np.array(data), np.array(labels))	result = create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10)	print(result[1])	save_history()
2024-11-08-02-20-35 84 81 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    return (np.array(data), np.array(labels))	result = create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10)	print(result[0])	save_history()
2024-11-08-02-20-35 84 82 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    return (np.array(data), np.array(labels))	result = create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10)	print(len(result[0]))	save_history()
2024-11-08-02-20-35 84 83 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    total_num_points = num_points.sum()	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    return (np.array(data), np.array(labels))	result = create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10)	print(result[0])	save_history()
2024-11-08-02-20-35 84 84 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    data = np.array(data)	    print(data.shape)	    return (data, np.array(labels))	result = create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10)	print(result[0])	save_history()
2024-11-08-02-20-35 84 85 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    return (np.array(data), np.array(labels))	data, labels = create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10)	print(data)	save_history()
2024-11-08-02-20-35 84 86 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    return (np.array(data), np.array(labels))	data, labels = create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10)	print(labels)	save_history()
2024-11-08-02-20-35 84 87 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    return (np.array(data), np.array(labels))	data, labels = create_dataset(4, 3, np.array([9, 10, 9, 8]), np.array([3, 5, 1, 9]), 10)	print(data)	save_history()
2024-11-08-02-20-35 84 88 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    return (np.array(data), np.array(labels))	data, labels = create_dataset(4, 3, np.array([3, 3, 3, 3, 3]), np.array([1, 3, 5, 7, 9]), 10)	print(data)	save_history()
2024-11-08-02-20-35 84 89 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    return (np.array(data), np.array(labels))	data, labels = create_dataset(4, 3, np.array([4, 4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	print(data)	save_history()
2024-11-08-02-20-35 84 90 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    return (np.array(data), np.array(labels))	data, labels = create_dataset(4, 3, np.array([4, 4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	print(data)	save_history()
2024-11-08-02-20-35 84 91 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    return (np.array(data), np.array(labels))	data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	print(data)	save_history()
2024-11-08-02-20-35 84 92 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    return (np.array(data), np.array(labels))	# data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	# print(data)	save_history()
2024-11-08-02-20-35 84 93 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    return (np.array(data), np.array(labels))	data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	num_cols = data.shape[1]	for i in range(num_cols):	    data[:, i] = data[:, i] - np.mean(data[:, i])	print(data)	save_history()
2024-11-08-02-20-35 84 94 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    return (np.array(data), np.array(labels))	data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	num_cols = data.shape[1]	print(data)	for i in range(num_cols):	    data[:, i] = data[:, i] - np.mean(data[:, i])	print(data)	save_history()
2024-11-08-02-20-35 84 95 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    return (np.array(data), np.array(labels))	data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	num_cols = data.shape[1]	# print(data)	for i in range(num_cols):	    data[:, i] = data[:, i] - np.mean(data[:, i])	print(np.mean(data[:, 0]))	save_history()
2024-11-08-02-20-35 84 96 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    return (np.array(data), np.array(labels))	data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	num_cols = data.shape[1]	# print(data)	for i in range(num_cols):	    data[:, i] = data[:, i] - np.mean(data[:, i])	print(np.mean(data[:, 0]))	save_history()
2024-11-08-02-20-35 84 97 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    return (np.array(data), np.array(labels))	data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	num_cols = data.shape[1]	# print(data)	for i in range(num_cols):	    data[:, i] = data[:, i] - np.mean(data[:, i])	print(np.mean(data[:, 0]))	save_history()
2024-11-08-02-20-35 84 98 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    return (np.array(data), np.array(labels))	data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	num_cols = data.shape[1]	# print(data)	for i in range(num_cols):	    data[:, i] = data[:, i] - np.mean(data[:, i])	print(np.mean(data[:, 0]))	save_history()
2024-11-08-02-20-35 84 99 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    return (np.array(data), np.array(labels))	data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	num_cols = data.shape[1]	# print(data)	for i in range(num_cols):	    data[:, i] = data[:, i] - np.mean(data[:, i])	print(np.mean(data[:, 0]))	save_history()
2024-11-08-02-20-35 84 100 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    return (np.array(data), np.array(labels))	data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)	num_cols = data.shape[1]	# print(data)	for i in range(num_cols):	    data[:, i] = data[:, i] - np.mean(data[:, i])	print(np.mean(data[:, 0]))	save_history()
2024-11-08-02-20-35 84 101 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    return (np.array(data), np.array(labels))	data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)		save_history()
2024-11-08-02-20-35 84 102 def create_dataset(num_clusters: int, 	                   num_dimensions: int, 	                   num_points: np.ndarray, 	                   cluster_std_devs: np.ndarray, 	                   center_std_dev: float) -> Tuple[np.ndarray, np.ndarray]:	    data = []	    labels = []	    origin = np.zeros((num_dimensions,))	    cluster_centres = np.random.normal(loc=origin, scale=center_std_dev, size=(num_clusters, num_dimensions))	    for i in range(num_clusters):	        cluster_points = np.random.normal(loc=cluster_centres[i], scale=cluster_std_devs[i], size=(num_points[i], num_dimensions))	        for point in cluster_points:	            data.append(point)	            labels.append(i)	    return (np.array(data), np.array(labels))	# data, labels = create_dataset(4, 5, np.array([4, 4, 4, 4, 4]), np.array([1, 3, 5, 7, 9]), 10)		save_history()
2024-11-08-02-20-35 84 103 def pca_with_svd(data: np.ndarray, n_components: int) -> np.ndarray:	    num_cols = data.shape[1]	    for i in range(num_cols):	        data[:, i] = data[:, i] - np.mean(data[:, i])	    u, s, vh = np.linalg.svd(data)	    principal_components = vh	    transformed_data = data.dot(principal_components[:n_components].T)	    return transformed_data		save_history()
2024-11-08-02-20-35 84 104 from sklearn.decomposition import PCA			def pca_with_svd(data: np.ndarray, n_components: int) -> np.ndarray:	    num_cols = data.shape[1]	    for i in range(num_cols):	        data[:, i] = data[:, i] - np.mean(data[:, i])	    u, s, vh = np.linalg.svd(data)	    principal_components = vh	    transformed_data = data.dot(principal_components[:n_components].T)	    return transformed_data		X = np.array([[1, 2, 3],	              [4, 5, 6],	              [7, 8, 9]])	for i in range(X.shape[1]):	    X = X[:, i] - np.mean(X[:, i])	pca = PCA(n_components=2)	X_proj = pca.fit_transform(X)	print(X_proj)	Y = np.array([[1, 2, 3],	              [4, 5, 6],	              [7, 8, 9]])	print(pca_with_svd(Y, 2))	save_history()
2024-11-08-02-20-35 84 105 from sklearn.decomposition import PCA			def pca_with_svd(data: np.ndarray, n_components: int) -> np.ndarray:	    num_cols = data.shape[1]	    for i in range(num_cols):	        data[:, i] = data[:, i] - np.mean(data[:, i])	    u, s, vh = np.linalg.svd(data)	    principal_components = vh	    transformed_data = data.dot(principal_components[:n_components].T)	    return transformed_data		X = np.array([[1, 2, 3],	              [4, 5, 6],	              [7, 8, 9]])	for i in range(X.shape[1]):	    X = X[:, i] - np.mean(X[:, i])	pca = PCA(n_components=2)	X_proj = pca.fit_transform(X)	print(X_proj)	Y = np.array([[1, 2, 3],	              [4, 5, 6],	              [7, 8, 9]])	print(pca_with_svd(Y, 2))	save_history()
2024-11-08-02-20-35 84 106 from sklearn.decomposition import PCA			def pca_with_svd(data: np.ndarray, n_components: int) -> np.ndarray:	    centred_data = data - np.mean(data, axis=0)	    u, s, vh = np.linalg.svd(centred_data)	    principal_components = vh	    transformed_data = data.dot(principal_components[:n_components].T)	    return transformed_data		X = np.array([[1, 2, 3],	              [4, 5, 6],	              [7, 8, 9]])	centered_X = X - np.mean(X, axis=0)	pca = PCA(n_components=2)	X_proj = pca.fit_transform(centered_X)	print(X_proj)	Y = np.array([[1, 2, 3],	              [4, 5, 6],	              [7, 8, 9]])	print(pca_with_svd(Y, 2))	save_history()
2024-11-08-02-20-35 84 107 from sklearn.decomposition import PCA			def pca_with_svd(data: np.ndarray, n_components: int) -> np.ndarray:	    centred_data = data - np.mean(data, axis=0)	    u, s, vh = np.linalg.svd(centred_data)	    principal_components = vh	    transformed_data = data.dot(principal_components[:n_components].T)	    return transformed_data		X = np.array([[1, 2, 3],	              [4, 5, 6],	              [7, 8, 9]])	centered_X = X - np.mean(X, axis=0)	pca = PCA(n_components=2)	X_proj = pca.fit_transform(centered_X)	print(X_proj)	Y = np.array([[1, 2, 3],	              [4, 5, 6],	              [7, 8, 9]])	print(pca_with_svd(Y, 2))	save_history()
2024-11-08-02-20-35 84 108 from sklearn.decomposition import PCA			def pca_with_svd(data: np.ndarray, n_components: int) -> np.ndarray:	    centred_data = data - np.mean(data, axis=0)	    u, s, vh = np.linalg.svd(centred_data)	    principal_components = vh	    transformed_data = data.dot(principal_components[:n_components].T)	    return transformed_data		X = np.array([[1, 2, 3],	              [4, 5, 6],	              [7, 8, 9]])	centered_X = X - np.mean(X, axis=0)	pca = PCA(n_components=2)	X_proj = pca.fit_transform(centered_X)	print(X_proj)	Y = np.array([[1, 2, 3],	              [4, 5, 6],	              [7, 8, 9]])	print(pca_with_svd(Y, 2))	save_history()
2024-11-08-02-20-35 84 109 from sklearn.decomposition import PCA			def pca_with_svd(data: np.ndarray, n_components: int) -> np.ndarray:	    centred_data = data - np.mean(data, axis=0)	    u, s, vh = np.linalg.svd(centred_data, full_matrices=False)	    principal_components = vh	    transformed_data = data.dot(principal_components[:n_components].T)	    return transformed_data		X = np.array([[1, 2, 3],	              [4, 5, 6],	              [7, 8, 9]])	centered_X = X - np.mean(X, axis=0)	pca = PCA(n_components=2)	X_proj = pca.fit_transform(centered_X)	print(X_proj)	Y = np.array([[1, 2, 3],	              [4, 5, 6],	              [7, 8, 9]])	print(pca_with_svd(Y, 2))	save_history()
2024-11-08-02-20-35 84 110 from sklearn.decomposition import PCA			def pca_with_svd(data: np.ndarray, n_components: int) -> np.ndarray:	    centred_data = data - np.mean(data, axis=0)	    u, s, vh = np.linalg.svd(centred_data, full_matrices=False)	    principal_components = vh	    transformed_data = data.dot(principal_components[:n_components].T)	    return transformed_data		X = np.array([[1, 2, 3],	              [4, 5, 6],	              [7, 8, 9]])	centered_X = X - np.mean(X, axis=0)	pca = PCA(n_components=2)	X_proj = pca.fit_transform(centered_X)	print(X_proj)	Y = np.array([[1, 2, 3],	              [4, 5, 6],	              [7, 8, 9]])	print(pca_with_svd(Y, 2))	save_history()
2024-11-08-02-20-35 84 111 from sklearn.decomposition import PCA			def pca_with_svd(data: np.ndarray, n_components: int) -> np.ndarray:	    centred_data = data - np.mean(data, axis=0)	    u, s, vh = np.linalg.svd(centred_data)	    principal_components = vh	    transformed_data = data.dot(principal_components[:n_components].T)	    return transformed_data		X = np.array([[1, 2, 3],	              [4, 5, 6],	              [7, 8, 9]])	centered_X = X - np.mean(X, axis=0)	pca = PCA(n_components=2)	X_proj = pca.fit_transform(centered_X)	print(X_proj)	Y = np.array([[1, 2, 3],	              [4, 5, 6],	              [7, 8, 9]])	print(pca_with_svd(Y, 2))	save_history()
2024-11-08-02-20-35 84 112 from sklearn.decomposition import PCA			def pca_with_svd(data: np.ndarray, n_components: int) -> np.ndarray:	    centred_data = data - np.mean(data, axis=0)	    u, s, vh = np.linalg.svd(centred_data)	    principal_components = vh	    transformed_data = data.dot(principal_components[:n_components].T)	    return transformed_data		X = np.array([[1, 2, 3],	              [4, 5, 6],	              [7, 8, 9]])	centered_X = X - np.mean(X, axis=0)	pca = PCA(n_components=2, whiten=False)	X_proj = pca.fit_transform(centered_X)	print(X_proj)	Y = np.array([[1, 2, 3],	              [4, 5, 6],	              [7, 8, 9]])	print(pca_with_svd(Y, 2))	save_history()
